<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="T:Core.Win32">
            <summary>
            Contains the Windows API functions signature.
            </summary>
            <summary>
            Contains the Windows API constants defined in headers.
            </summary>
            <summary>
            Contains the Windows API functions signature.
            </summary>
            <summary>
            Contains the Windows API constants defined in headers.
            </summary>
            <summary>
            Contains the Windows API constants defined in headers.
            </summary>
            <summary>
            Contains the Windows API functions signature.
            </summary>
            <summary>
            Contains the Windows API constants defined in headers.
            </summary>
            <summary>
            Contains the Windows API constants defined in headers.
            </summary>
            <summary>
            Contains the Windows API constants defined in headers.
            </summary>
            <summary>
            Contains the Windows API functions signature.
            </summary>
            <summary>
            Contains the Windows API functions signature.
            </summary>
            <summary>
            Contains the Windows API functions signature.
            </summary>
        </member>
        <member name="M:Core.Win32.WTSQuerySessionInformation(System.IntPtr,System.Int32,Core.Win32.WTS_INFO_CLASS,System.IntPtr@,System.UInt32@)">
            <summary>
            WTS query session information.
            </summary>
            <param name="hServer">The h server.</param>
            <param name="sessionId">The session id.</param>
            <param name="wtsInfoClass">The wts info class.</param>
            <param name="ppBuffer">The pp buffer.</param>
            <param name="pBytesReturned">The p bytes returned.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Win32.WTSFreeMemory(System.IntPtr)">
            <summary>
            WTS free memory.
            </summary>
            <param name="memory">The memory.</param>
        </member>
        <member name="M:Core.Win32.GetSystemMetrics(Core.Win32.SystemMetric)">
            <summary>
            Gets system metrics.
            </summary>
            <param name="smIndex">The sm index.</param>
            <returns>A System.Int32.</returns>
        </member>
        <member name="M:Core.Win32.SetWindowsHookEx(Core.Win32.HookType,Core.Win32.HookProc,System.IntPtr,System.UInt32)">
            <summary>
            This is the Import for the SetWindowsHookEx function.
            Use this function to install a thread-specific hook.
            </summary>
            <param name="hook"></param>
            <param name="callback"></param>
            <param name="hMod"></param>
            <param name="dwThreadId"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Win32.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            This is the Import for the UnhookWindowsHookEx function.
            Call this function to uninstall the hook.
            </summary>
            <param name="hhk"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Win32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This is the Import for the CallNextHookEx function.
            Use this function to pass the hook information to the next hook procedure in chain.
            </summary>
            <param name="hhk"></param>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Win32.WTS_INFO_CLASS">
            <summary>
            Specifies the WTS info class.
            </summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSInitialProgram">
            <summary>Indicates WTS initial program.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSApplicationName">
            <summary>Indicates WTS application name.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSWorkingDirectory">
            <summary>Indicates WTS working directory.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSOEMId">
            <summary>Indicates WTS OEM id.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSSessionId">
            <summary>Indicates WTS session id.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSUserName">
            <summary>Indicates WTS user name.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSWinStationName">
            <summary>Indicates WTS win station name.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSDomainName">
            <summary>Indicates WTS domain name.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSConnectState">
            <summary>Indicates WTS connect state.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientBuildNumber">
            <summary>Indicates WTS client build number.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientName">
            <summary>Indicates WTS client name.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientDirectory">
            <summary>Indicates WTS client directory.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientProductId">
            <summary>Indicates WTS client product id.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientHardwareId">
            <summary>Indicates WTS client hardware id.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientAddress">
            <summary>Indicates WTS client address.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientDisplay">
            <summary>Indicates WTS client display.</summary>
        </member>
        <member name="F:Core.Win32.WTS_INFO_CLASS.WTSClientProtocolType">
            <summary>Indicates WTS client protocol type.</summary>
        </member>
        <member name="T:Core.Win32.HookType">
            <summary>
            Specifies the hook type.
            </summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_JOURNALRECORD">
            <summary>Indicates wh journalrecord.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_JOURNALPLAYBACK">
            <summary>Indicates wh journalplayback.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_KEYBOARD">
            <summary>Indicates wh keyboard.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_GETMESSAGE">
            <summary>Indicates wh getmessage.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_CALLWNDPROC">
            <summary>Indicates wh callwndproc.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_CBT">
            <summary>Indicates wh cbt.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_SYSMSGFILTER">
            <summary>Indicates wh sysmsgfilter.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_MOUSE">
            <summary>Indicates wh mouse.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_HARDWARE">
            <summary>Indicates wh hardware.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_DEBUG">
            <summary>Indicates wh debug.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_SHELL">
            <summary>Indicates wh shell.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_FOREGROUNDIDLE">
            <summary>Indicates wh foregroundidle.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_CALLWNDPROCRET">
            <summary>Indicates wh callwndprocret.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_KEYBOARD_LL">
            <summary>Indicates wh keyboard ll.</summary>
        </member>
        <member name="F:Core.Win32.HookType.WH_MOUSE_LL">
            <summary>Indicates wh mouse ll.</summary>
        </member>
        <member name="T:Core.Win32.SystemMetric">
            <summary>
            Specifies the system metric.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXSCREEN">
            <summary>
             Width of the screen of the primary display monitor, in pixels. This is the same values obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYSCREEN">
            <summary>
            Height of the screen of the primary display monitor, in pixels. This is the same values obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYVSCROLL">
            <summary>
            Width of a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXVSCROLL">
            <summary>
            Height of a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYCAPTION">
            <summary>
            Height of a caption area, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXBORDER">
            <summary>
            Width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for windows with the 3-D look. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYBORDER">
            <summary>
            Height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for windows with the 3-D look. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXDLGFRAME">
            <summary>
            Thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border and SM_CYFIXEDFRAME is the width of the vertical border. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYDLGFRAME">
            <summary>
            Thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border and SM_CYFIXEDFRAME is the width of the vertical border. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYVTHUMB">
            <summary>
            Height of the thumb box in a vertical scroll bar, in pixels
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXHTHUMB">
            <summary>
            Width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXICON">
            <summary>
            Default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions specified by SM_CXICON and SM_CYICON
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYICON">
            <summary>
            Default height of an icon, in pixels. The LoadIcon function can load only icons with the dimensions SM_CXICON and SM_CYICON.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXCURSOR">
            <summary>
            Width of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYCURSOR">
            <summary>
            Height of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMENU">
            <summary>
            Height of a single-line menu bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXFULLSCREEN">
            <summary>
            Width of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars, call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYFULLSCREEN">
            <summary>
            Height of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars, call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYKANJIWINDOW">
            <summary>
            For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_MOUSEWHEELPRESENT">
            <summary>
            Nonzero if a mouse with a wheel is installed; zero otherwise
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYHSCROLL">
            <summary>
            Height of the arrow bitmap on a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXHSCROLL">
            <summary>
            Width of the arrow bitmap on a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_DEBUG">
            <summary>
            Nonzero if the debug version of User.exe is installed; zero otherwise.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_SWAPBUTTON">
            <summary>
            Nonzero if the left and right mouse buttons are reversed; zero otherwise.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_RESERVED1">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_RESERVED2">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_RESERVED3">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_RESERVED4">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMIN">
            <summary>
            Minimum width of a window, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMIN">
            <summary>
            Minimum height of a window, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXSIZE">
            <summary>
            Width of a button in a window's caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYSIZE">
            <summary>
            Height of a button in a window's caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXFRAME">
            <summary>
            Thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYFRAME">
            <summary>
            Thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMINTRACK">
            <summary>
            Minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMINTRACK">
            <summary>
            Minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXDOUBLECLK">
            <summary>
            Width of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYDOUBLECLK">
            <summary>
            Height of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click. (The two clicks must also occur within a specified time.) 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXICONSPACING">
            <summary>
            Width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYICONSPACING">
            <summary>
            Height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_MENUDROPALIGNMENT">
            <summary>
            Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; zero if the menus are left-aligned.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_PENWINDOWS">
            <summary>
            Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_DBCSENABLED">
            <summary>
            Nonzero if User32.dll supports DBCS; zero otherwise. (WinMe/95/98): Unicode
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CMOUSEBUTTONS">
            <summary>
            Number of buttons on mouse, or zero if no mouse is installed.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXFIXEDFRAME">
            <summary>
            Identical Values Changed After Windows NT 4.0  
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYFIXEDFRAME">
            <summary>
            Identical Values Changed After Windows NT 4.0
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXSIZEFRAME">
            <summary>
            Identical Values Changed After Windows NT 4.0
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYSIZEFRAME">
            <summary>
            Identical Values Changed After Windows NT 4.0
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_SECURE">
            <summary>
            Nonzero if security is present; zero otherwise.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXEDGE">
            <summary>
            Width of a 3-D border, in pixels. This is the 3-D counterpart of SM_CXBORDER
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYEDGE">
            <summary>
            Height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMINSPACING">
            <summary>
            Width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CXMINIMIZED.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMINSPACING">
            <summary>
            Height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CYMINIMIZED.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXSMICON">
            <summary>
            Recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYSMICON">
            <summary>
            Recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYSMCAPTION">
            <summary>
            Height of a small caption, in pixels
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXSMSIZE">
            <summary>
            Width of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYSMSIZE">
            <summary>
            Height of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMENUSIZE">
            <summary>
            Width of menu bar buttons, such as the child window close button used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMENUSIZE">
            <summary>
            Height of menu bar buttons, such as the child window close button used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_ARRANGE">
            <summary>
            Flags specifying how the system arranged minimized windows
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMINIMIZED">
            <summary>
            Width of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMINIMIZED">
            <summary>
            Height of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMAXTRACK">
            <summary>
            Default maximum width of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMAXTRACK">
            <summary>
            Default maximum height of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMAXIMIZED">
            <summary>
            Default width, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMAXIMIZED">
            <summary>
            Default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_NETWORK">
            <summary>
            Least significant bit is set if a network is present; otherwise, it is cleared. The other bits are reserved for future use
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CLEANBOOT">
            <summary>
            Value that specifies how the system was started: 0-normal, 1-failsafe, 2-failsafe /w net
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXDRAG">
            <summary>
            Width of a rectangle centered on a drag point to allow for limited movement of the mouse pointer before a drag operation begins, in pixels. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYDRAG">
            <summary>
            Height of a rectangle centered on a drag point to allow for limited movement of the mouse pointer before a drag operation begins. This value is in pixels. It allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_SHOWSOUNDS">
            <summary>
            Nonzero if the user requires an application to present information visually in situations where it would otherwise present the information only in audible form; zero otherwise. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXMENUCHECK">
            <summary>
            Width of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYMENUCHECK">
            <summary>
            Height of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_SLOWMACHINE">
            <summary>
            Nonzero if the computer has a low-end (slow) processor; zero otherwise
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_MIDEASTENABLED">
            <summary>
            Nonzero if the system is enabled for Hebrew and Arabic languages, zero if not.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_MOUSEPRESENT">
            <summary>
            Nonzero if a mouse is installed; zero otherwise. This value is rarely zero, because of support for virtual mice and because some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_XVIRTUALSCREEN">
            <summary>
            Windows 2000 (v5.0+) Coordinate of the top of the virtual screen
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_YVIRTUALSCREEN">
            <summary>
            Windows 2000 (v5.0+) Coordinate of the left of the virtual screen
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXVIRTUALSCREEN">
            <summary>
            Windows 2000 (v5.0+) Width of the virtual screen
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYVIRTUALSCREEN">
            <summary>
            Windows 2000 (v5.0+) Height of the virtual screen
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CMONITORS">
            <summary>
            Number of display monitors on the desktop
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_SAMEDISPLAYFORMAT">
            <summary>
            Windows XP (v5.1+) Nonzero if all the display monitors have the same color format, zero otherwise. Note that two displays can have the same bit depth, but different color formats. For example, the red, green, and blue pixels can be encoded with different numbers of bits, or those bits can be located in different places in a pixel's color value. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_IMMENABLED">
            <summary>
            Windows XP (v5.1+) Nonzero if Input Method Manager/Input Method Editor features are enabled; zero otherwise
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CXFOCUSBORDER">
            <summary>
            Windows XP (v5.1+) Width of the left and right edges of the focus rectangle drawn by DrawFocusRect. This value is in pixels. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CYFOCUSBORDER">
            <summary>
            Windows XP (v5.1+) Height of the top and bottom edges of the focus rectangle drawn by DrawFocusRect. This value is in pixels. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_TABLETPC">
            <summary>
            Nonzero if the current operating system is the Windows XP Tablet PC edition, zero if not.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_MEDIACENTER">
            <summary>
            Nonzero if the current operating system is the Windows XP, Media Center Edition, zero if not.
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CMETRICS_OTHER">
            <summary>
            Metrics Other
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CMETRICS_2000">
            <summary>
            Metrics Windows 2000
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_CMETRICS_NT">
            <summary>
            Metrics Windows NT
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_REMOTESESSION">
            <summary>
            Windows XP (v5.1+) This system metric is used in a Terminal Services environment. If the calling process is associated with a Terminal Services client session, the return value is nonzero. If the calling process is associated with the Terminal Server console session, the return value is zero. The console session is not necessarily the physical console - see WTSGetActiveConsoleSessionId for more information. 
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_SHUTTINGDOWN">
            <summary>
            Windows XP (v5.1+) Nonzero if the current session is shutting down; zero otherwise
            </summary>
        </member>
        <member name="F:Core.Win32.SystemMetric.SM_REMOTECONTROL">
            <summary>
            Windows XP (v5.1+) This system metric is used in a Terminal Services environment. Its value is nonzero if the current session is remotely controlled; zero otherwise
            </summary>
        </member>
        <member name="T:Core.Win32.MessageBoxFlags">
            <summary>
            Specifies MessageBox() Flags.
            </summary>
        </member>
        <member name="T:Core.Win32.HookProc">
            <summary>
            Hock proc delegate signature.
            </summary>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Tools.DateUtil">
            <summary>
            Utils that use datetime
            </summary>
        </member>
        <member name="M:Core.Tools.DateUtil.EqualsUsingSecond(System.DateTime,System.DateTime)">
            <summary>
            Compare to date using the second precision.
            </summary>
            <param name="date1">First date</param>
            <param name="date2">Second date</param>
            <returns>True is there's no difference in second. Even if millisonc is not the same.</returns>
        </member>
        <member name="M:Core.Tools.DateUtil.GetDateWithoutSeconds(System.DateTime)">
            <summary>
            Get date without seconds.
            </summary>
            <param name="refDate">The ref date.</param>
            <returns>A System.DateTime.</returns>
        </member>
        <member name="M:Core.Tools.DateUtil.GetDateWithoutHour(System.DateTime)">
            <summary>
            Gets date without hour.
            </summary>
            <param name="refDate">The ref date.</param>
            <returns>A System.DateTime.</returns>
        </member>
        <member name="M:Core.Tools.DateUtil.GetDateDetailedToSecond(System.DateTime)">
            <summary>
            Get date without stopping to second.
            </summary>
            <param name="refDate">The ref date.</param>
            <returns>A System.DateTime.</returns>
        </member>
        <member name="M:Core.Tools.DateUtil.FormatDateFromDateTo(System.DateTime@,System.DateTime@)">
            <summary>
            Format date to date from without hour. This will truncate the fromDate and put 23:59:59 to dateTo
            </summary>
            <param name="dateFrom">The date from.</param>
            <param name="dateTo">The date to.</param>
        </member>
        <member name="M:Core.Tools.DateUtil.GetDateWithoutSeconds(System.Nullable{System.DateTime})">
            <summary>
            Gets date without seconds.
            </summary>
            <param name="date">The date.</param>
            <returns>A System.Nullable&lt;System.DateTime&gt;.</returns>
        </member>
        <member name="T:Core.Tools.DatabaseUtil">
            <summary>
            Class used to provide utilty functions to handle common database features.
            </summary>
        </member>
        <member name="M:Core.Tools.DatabaseUtil.CreateTempLocalSQLServerDatabase(System.String,System.String,System.String)">
            <summary>
            Creates a new temporary local SQLServer database by detaching copying over any existing files in the temp folder and attaching the database file.
            </summary>
            <param name="serverName">The server name.</param>
            <param name="dbFilePath">The db file path.</param>
            <param name="dbName">The db name.</param>
        </member>
        <member name="M:Core.Tools.DatabaseUtil.CreateTempLocalSQLServerDatabase(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Creates a new temporary local SQLServer database by detaching copying over any existing files in the temp folder and attaching the database file.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="assembly">The assembly that contains the embeded database.</param>
            <param name="dbName">The db name.</param>
        </member>
        <member name="T:Core.Schema.Updater.MigrationTask">
            <summary>
            Represents a migration task.
            </summary>
        </member>
        <member name="M:Core.Schema.Updater.MigrationTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Schema.Updater.MigrationTask"/> class.
            </summary>
        </member>
        <member name="M:Core.Schema.Updater.MigrationTask.Down">
            <summary>
            Downs this instance.
            </summary>
        </member>
        <member name="P:Core.Schema.Updater.MigrationTask.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:Core.Collections.CastList`1">
            <summary>
            Represents a cast list.
            </summary>
            
        </member>
        <member name="M:Core.Collections.CastList`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Core.Collections.CastList`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Core.Collections.CastList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Core.Collections.CastList`1.Get``1">
            <summary>
            Gets the first value of type T.
            </summary>
            <returns>The value that matches type T</returns>
        </member>
        <member name="M:Core.Collections.CastList`1.TryGet``1">
            <summary>
            Trys to Get the first value of type T or <c>null</c>.
            </summary>
            <returns>The value that matches type T</returns>
        </member>
        <member name="M:Core.Collections.CastList`1.Contains``1">
            <summary>
            Does the list contains an object of type T.
            </summary>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Collections.CastList`1.Contains(System.Type)">
            <summary>
            Does the list contains an object of type.
            </summary>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Collections.CastList`1.Get``1(System.Int32)">
            <summary>
            Gets a value of type T for a given key.
            </summary>
            <param name="index">The key.</param>
            <returns>The value that matches the given key</returns>
            <remarks>The object will be converted to the resquested if required</remarks>
        </member>
        <member name="M:Core.Collections.CastList`1.TryGet``1(System.Int32)">
            <summary>
            Trys to get a value of type T for a given key or <c>null</c> if not found.
            </summary>
            <param name="index">The index.</param>
            <returns>The value that matches the given key or <c>null</c></returns>
            <remarks>The object will be converted to the resquested if required</remarks>
        </member>
        <member name="M:Core.Collections.CastList`1.EnsureType``1(System.Object)">
            <summary>
            Ensures that item is of the right type.
            </summary>
            <param name="item">The item.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Core.Collections.CastList`1.Set``1(``0)">
            <summary>
            Sets a value of type T.
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:Core.Tools.Win32Util">
            <summary>
            Win32 Utilities repository
            </summary>
        </member>
        <member name="M:Core.Tools.Win32Util.CreateProcess(System.String)">
            <summary>
            Creates a new windows process.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns>The id of the new process.</returns>
        </member>
        <member name="M:Core.Tools.Win32Util.CreateProcess(System.String,System.String)">
            <summary>
            Creates a new windows process.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="commandLine">The command line.</param>
            <returns>The id of the new process.</returns>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.#ctor(System.IntPtr)">
            <summary>
            Native window.
            </summary>
            <param name="_hWnd">The  h wnd.</param>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.FindWindow(System.String,System.String)">
            <summary>
            Find window.
            </summary>
            <param name="sClassName">The s class name.</param>
            <param name="sWindowTitle">The s window title.</param>
            <returns>A Core.Tools.Util.NativeWindow.</returns>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.WaitForWindow(System.String,System.String,System.Int32)">
            <summary>
            Wait for window.
            </summary>
            <param name="sClassName">The s class name.</param>
            <param name="sWindowTitle">The s window title.</param>
            <param name="iTimeout">The i timeout.</param>
            <returns>A Core.Tools.Util.NativeWindow.</returns>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.WaitUntilWindowIsGone(System.String,System.String,System.Int32)">
            <summary>
            Wait until window is gone.
            </summary>
            <param name="sClassName">The s class name.</param>
            <param name="sWindowTitle">The s window title.</param>
            <param name="iTimeout">The i timeout.</param>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.SetForeground">
            <summary>
            Set foreground.
            </summary>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.GiveControlFocus">
            <summary>
            Give control focus.
            </summary>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.SetWindowPos(System.Int32,System.Int32)">
            <summary>
            Set window pos.
            </summary>
            <param name="X">The x.</param>
            <param name="Y">The y.</param>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.SetWindowSize(System.Int32,System.Int32)">
            <summary>
            Set window size.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="F:Core.Tools.Win32Util.NativeWindow.hWnd">
            <summary>Field for h wnd.</summary>
        </member>
        <member name="F:Core.Tools.Win32Util.NativeWindow.oInfo">
            <summary>Field for o info.</summary>
        </member>
        <member name="F:Core.Tools.Win32Util.NativeWindow.sName">
            <summary>Field for s name.</summary>
        </member>
        <member name="F:Core.Tools.Win32Util.NativeWindow.sClassName">
            <summary>Field for s class name.</summary>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.ChildWindows">
            <summary>
            Gets the child windows.
            </summary>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.ClassName">
            <summary>
            Gets the class name.
            </summary>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.Info">
            <summary>
            Gets the info.
            </summary>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.#ctor(System.IntPtr)">
            <summary>
            Child windows enumerator.
            </summary>
            <param name="_hParentWnd">The  h parent wnd.</param>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.MoveNext">
            <summary>
                                Advances the enumerator to the next element of the collection.
                            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                            </returns>
            <exception cref="T:System.InvalidOperationException">
                                The collection was modified after the enumerator was created. 
                            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.Reset">
            <summary>
                                Sets the enumerator to its initial position, which is before the first element in the collection.
                            </summary>
            <exception cref="T:System.InvalidOperationException">
                                The collection was modified after the enumerator was created. 
                            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through a collection.
                            </summary>
            <returns>
                                An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
                            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.EnumChildProc(System.IntPtr,System.Int32)">
            <summary>
            Enum child proc.
            </summary>
            <param name="hwndChild">The hwnd child.</param>
            <param name="lParam">The l param.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="F:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.hParentWnd">
            <summary>Field for h parent wnd.</summary>
        </member>
        <member name="F:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.oChildWnds">
            <summary>Field for o child wnds.</summary>
        </member>
        <member name="F:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.iIndex">
            <summary>Field for i index.</summary>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.Current">
            <summary>
                                Gets the current element in the collection.
                            </summary>
            <returns>
                                The current element in the collection.
                            </returns>
            <exception cref="T:System.InvalidOperationException">
                                The enumerator is positioned before the first element of the collection or after the last element.
                            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.List">
            <summary>
            Gets the list.
            </summary>
        </member>
        <member name="P:Core.Tools.Win32Util.NativeWindow.ChildWindowsEnumerator.Item(System.Int32)">
            <summary>
            Gets the this.
            </summary>
        </member>
        <member name="T:Core.Tools.ConfigUtil">
            <summary>
            Class used to provide utilty functions to handle common configuration features.
            </summary>
        </member>
        <member name="M:Core.Tools.ConfigUtil.GetDecryptedConnectionStrings">
            <summary>
            Gets a decrypted connection strings section from the main config file.
            </summary>
        </member>
        <member name="M:Core.Tools.ConfigUtil.GetDecryptedConnectionStrings(System.String)">
            <summary>
            Gets a decrypted connection strings section from the a config file.
            </summary>
        </member>
        <member name="M:Core.Tools.ConfigUtil.EcryptConnectionStrings">
            <summary>
            Encrypts the connection strings section in the main config file.
            </summary>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Provide extension method to String class.
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Transforms text to camel case. Eg: AN_APPLE to AnApple
            </summary>
            <param name="text">The text.</param>
            <returns>A System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String,System.Boolean)">
            <summary>
            Transforms text to camel case. Eg: AN_APPLE to AnApple
            </summary>
            <param name="text">The text.</param>
            <param name="forceConversion">Forces the conversion to camel case</param>
            <returns>A System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.ToPlural(System.String)">
            <summary>
            Transforms a name to its plural form.
            </summary>
            <param name="text">The text.</param>
            <returns>A System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.CompareText(System.String,System.String)">
            <summary>
            Compare 2 string. This function will trim the 2 string and ignore the case.
            </summary>
            <param name="strA">The str a.</param>
            <param name="strB">The str b.</param>
            <returns>0 = strings are equal; -1=The First string is less than second one; 1=The first string is greater than second string</returns>
        </member>
        <member name="M:System.StringExtensions.CompareText(System.String,System.String,System.StringComparison)">
            <summary>
            Compares the text.
            </summary>
            <param name="strA">The STR A.</param>
            <param name="strB">The STR B.</param>
            <param name="stringCompararisonOption">The string compararison option.</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.EqualText(System.String,System.String)">
            <summary>
            Compare 2 string and return true is they are the same. This function will trim the 2 string and ignore the case.
            </summary>
            <param name="strA">The str a.</param>
            <param name="strB">The str b.</param>
            <returns>True if the string are consider equal</returns>
        </member>
        <member name="M:System.StringExtensions.NormalizeText(System.String)">
            <summary>
            Normalize text so that it can be use for comparison.
            </summary>
            <param name="str">The string to normalize.</param>
            <returns>The upper cased and trimmed value</returns>
        </member>
        <member name="M:System.StringExtensions.LevenshteinDistance(System.String,System.String)">
            <summary>
            Compute Levenshtein distance
            Levenshtein Distance Algorithm: C# Implementation
            by Lasse Johansen
            http://www.merriampark.com/ldcsharp.htm
            </summary>
            <param name="s">String 1</param>
            <param name="t">String 2</param>
            <returns>Distance between the two strings.
            The larger the number, the bigger the difference.
            </returns>
        </member>
        <member name="M:System.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Is Null Or Empty
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:System.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Lefts the specified string.
            </summary>
            <param name="strA">The STR A.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.ConcatEX(System.String,System.String,System.String)">
            <summary>
            Concat EX.
            </summary>
            <param name="strA">The str A.</param>
            <param name="separator">The separator.</param>
            <param name="str">The str.</param>
            <returns>A System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.TrimEX(System.String)">
            <summary>
            Trim EX.
            </summary>
            <param name="strA">The str a.</param>
            <returns>A System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Rights.
            </summary>
            <param name="strA">The str A.</param>
            <param name="length">The length.</param>
            <returns>A System.String.</returns>
        </member>
        <member name="T:Core.Tools.SqlUtil">
            <summary>
            Provides helper methods for SQL.
            </summary>
        </member>
        <member name="F:Core.Tools.SqlUtil.TSQLReservedKeywords">
            <summary>
            TSQL reserved keywords list.
            </summary>
        </member>
        <member name="F:Core.Tools.SqlUtil.PLSQLReservedKeywords">
            <summary>
            PL/SQL reserved keywords list.
            </summary>
        </member>
        <member name="M:Core.Tools.SqlUtil.ValidateObjectName(System.String)">
            <summary>
            Validates the name of SQL objects and ensures that they will be usable in an SQL statement.
            </summary>
            <param name="toValidate">The objects to validate.</param>
            <returns></returns>
        </member>
        <member name="T:Core.Services.ServiceBase">
            <summary>
            Base service class that is compatible with the Core's Service Broker framework.
            </summary>
        </member>
        <member name="M:Core.Services.ServiceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Services.ServiceBase"/> class.
            </summary>
        </member>
        <member name="M:Core.Services.ServiceBase.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Services.ServiceBase"/> class.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Core.Services.ServiceBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Services.ServiceBase"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="queueName">Name of the queue.</param>
        </member>
        <member name="M:Core.Services.ServiceBase.#ctor(Core.CoreContextSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Services.ServiceBase"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Core.Services.ServiceBase.#ctor(Core.CoreContextSettings,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Services.ServiceBase"/> class.
            </summary>
            <param name="settings">The settings.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Core.Services.ServiceBase.#ctor(Core.CoreContextSettings,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Services.ServiceBase"/> class.
            </summary>
            <param name="settings">The settings.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="queueName">Name of the queue.</param>
        </member>
        <member name="M:Core.Services.ServiceBase.Init(Core.CoreContextSettings,System.String[])">
            <summary>
            Inits a new service
            </summary>
            <param name="settings">The settings.</param>
            <param name="args">Command args</param>
        </member>
        <member name="M:Core.Services.ServiceBase.Init(Core.CoreContextSettings,System.String,System.String)">
            <summary>
            Inits a new service.
            </summary>
            <param name="settings">The settings.</param>
            <param name="serviceName">This service name</param>
            <param name="queueName">The queue name we will process</param>
        </member>
        <member name="M:Core.Services.ServiceBase.Run">
            <summary>
            Runs the service
            </summary>
        </member>
        <member name="M:Core.Services.ServiceBase.Broker_ShutdownRequested(Core.Schema.Message,Core.BrokerControlMessages.Shutdown)">
            <summary>
            On broker shutdown requested.
            </summary>
            <param name="message">The message.</param>
            <param name="shutdown">The shutdown.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Services.ServiceBase.Broker_XmlMessage(Core.Schema.Message,System.String)">
            <summary>
            On broker xml message.
            </summary>
            <param name="message">The message.</param>
            <param name="content">The content.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Services.ServiceBase.ProcessXmlMessage(Core.Schema.Message,System.Xml.XmlDocument)">
            <summary>
            Processes an XML message
            </summary>
            <remarks>
            This is the method you should override for the actual processing of XML messages.
            </remarks>
            <param name="message">The raw message object.</param>
            <param name="content">The XML message content.</param>
            <returns>Return <c>true</c> if the message should be marked treated; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Core.Services.ServiceBase.RegisterMessageListener``1(System.Func{Core.Schema.Message,``0,System.Boolean})">
            <summary>
            Registers a message listener for a Data Contract.
            </summary>
            <param name="listener">The delegate that will process this data contract message type.</param>
        </member>
        <member name="M:Core.Services.ServiceBase.OnShutdownRequested(Core.Schema.Message,Core.BrokerControlMessages.Shutdown)">
            <summary>
            On shutdown requested.
            </summary>
            <param name="message">The message.</param>
            <param name="shutdown">The shutdown.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Services.ServiceBase.MessageLookup(Core.CoreContext)">
            <summary>
            Message lookup.
            </summary>
        </member>
        <member name="M:Core.Services.ServiceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Core.Services.ServiceBase.StartListeningForMessages">
            <summary>
            Registers this client service with the broker and starts listening for available messages to process.
            </summary>
            <remarks>
            You can either call this yourself or use StartListeningForMessages for async operations.
            </remarks>
        </member>
        <member name="M:Core.Services.ServiceBase.StopListeningForMessages">
            <summary>
            Stops listening for messages.
            </summary>
        </member>
        <member name="M:Core.Services.ServiceBase._StopListeningForMessages">
            <summary>
            Stops listening for messages.
            </summary>
        </member>
        <member name="M:Core.Services.ServiceBase.OnTimer(System.Object)">
            <summary>
            On timer.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="P:Core.Services.ServiceBase.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="E:Core.Services.ServiceBase.ShutdownRequested">
            <summary>
            Occurs when shutdown is requested.
            </summary>
        </member>
        <member name="E:Core.Services.ServiceBase.Starting">
            <summary>
            Occurs when we are starting.
            </summary>
        </member>
        <member name="E:Core.Services.ServiceBase.Stopping">
            <summary>
            Occurs when we are stopping.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase.IsListening">
            <summary>
            Is this service listening for messages.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase.AutoUpdateStatus">
            <summary>
            Gets or sets a value indicating whether to auto update our status.
            </summary>
            <value><c>true</c> if we want to auto update our status; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Core.Services.ServiceBase.OnErrorDelay">
            <summary>
            Gets or sets the on error delay.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase.QueueName">
            <summary>
            Gets the queue name
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase.ServiceId">
            <summary>
            Gets the service id
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase.ServiceName">
            <summary>
            Gets the service name
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase._Listeners">
            <summary>
            Gets or sets the listeners.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase.LookupFrequency">
            <summary>
            Gets or sets the database lookup delay.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase.UpdateStatusFrequency">
            <summary>
            Gets or sets the update status frequency.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase._NextLookupFrequency">
            <summary>
            Gets or sets the next lookup frequency.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase._NextUpdateStatus">
            <summary>
            Gets or sets the next update status.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase._Timer">
            <summary>
            Gets or sets the timer.
            </summary>
        </member>
        <member name="P:Core.Services.ServiceBase._StopRequested">
            <summary>
            Gets or sets the id of the thread that requested a shutdown.
            </summary>
            <value>The id of the thread that requested a shutdown.</value>
        </member>
        <member name="P:Core.Services.ServiceBase._RunningThread">
            <summary>
            Gets or sets the id of the thread that is currently processing messages.
            </summary>
            <value>The id of the thread that is currently processing messages.</value>
        </member>
        <member name="T:Core.Services.IWindowsService">
            <summary>
            Represents a windows service base.
            </summary>
        </member>
        <member name="M:Core.Services.IWindowsService.Execute">
            <summary>
            Main service execution entry.
            </summary>
            <remarks>Ensure that you have 'IsRunning = true' when your service Execute() is called.</remarks>
        </member>
        <member name="M:Core.Services.IWindowsService.Startup(System.String[])">
            <summary>
            Starts the windows service.
            </summary>
        </member>
        <member name="E:Core.Services.IWindowsService.Starting">
            <summary>
            Occurs when starting.
            </summary>
        </member>
        <member name="E:Core.Services.IWindowsService.Stopping">
            <summary>
            Occurs when stopping.
            </summary>
        </member>
        <member name="P:Core.Services.IWindowsService.IsRunning">
            <summary>
            Gets a value indicating whether the service is running.
            </summary>
        </member>
        <member name="P:Core.Services.IWindowsService.StopRequested">
            <summary>
            Gets or sets a value indicating whether the service stop requested.
            </summary>
        </member>
        <member name="T:Core.Tools.PathUtil">
            <summary>
            Class used to provid utilty function to handle path.
            </summary>
        </member>
        <member name="M:Core.Tools.PathUtil.GetProcessLocation">
            <summary>
            Gets the file path of this process
            </summary>
            <returns>Returns the file path of this process</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.GetApplicationLocation">
            <summary>
            Gets the file path of this application
            </summary>
            <returns>Returns the file path of this application</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.GetCallersLocation">
            <summary>
            Gets the file path of the calling assembly
            </summary>
            <returns>Returns the file path of the calling assembly</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.GetCodeBaseLocation">
            <summary>
            Gets code base location.
            </summary>
            <returns>A System.IO.FileInfo.</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.NormalizePath(System.String,System.Boolean)">
            <summary>
            Normalize a string path. Replace / by \ and add a \ at the end if 
            necessery.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="isDirectory">Whether the path is a directory or not.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.GetFilesInDir(System.String,System.String,System.Boolean)">
            <summary>
            Get a IList of FileInfo with all file in the gived directory
            </summary>
            <param name="path">Root path</param>
            <param name="searchPattern">Search pattern like *.*</param>
            <param name="recusive">Look in subdirectory</param>
            <returns>The list of FileInfo in dir</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.GetFilesInDir(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets files in dir.
            </summary>
            <param name="directory">The directory.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>A System.Collections.Generic.IList&lt;System.IO.FileInfo&gt;.</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.CopyDirectory(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copy directory structure recursively    
            </summary>
            <param name="src">Source path</param>
            <param name="dst">Destination path</param>
            <param name="extensionToCopy">The extension to copy</param>
            <param name="copyChildFolder">Do we copy child folder to new destination</param>
        </member>
        <member name="M:Core.Tools.PathUtil.GetFilesCount(System.String,System.String,System.Boolean)">
            <summary>
            Count the file in a directory  
            </summary>
            <param name="path">Root path</param>
            <param name="searchPattern">Search pattern like *.*</param>
            <param name="recusive">Look in subdirectory</param>
        </member>
        <member name="M:Core.Tools.PathUtil.GetLatestFileInDir(System.String,System.String,System.Boolean)">
            <summary>
            Get the latest file in a directory.
            </summary>
            <param name="path">Root path</param>
            <param name="searchPattern">Search pattern like *.*</param>
            <param name="recusive">Look in subdirectory</param>
            <returns>The file info of the more recent file we found in the folder</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.IsDirectoryPathValid(System.String,System.String@)">
            <summary>
            Valid if the path is valid
            </summary>
            <param name="path">The path to valid</param>
            <param name="message">The returned error message if not valid</param>
            <returns>True if the path is valid and exist</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.GetRelativePath(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Gets a relative path.
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="destinationDirectory">The destination directory.</param>
            <returns>A System.String.</returns>
        </member>
        <member name="M:Core.Tools.PathUtil.GetRelativePath(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Gets a relative path.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <returns>A System.String.</returns>
        </member>
        <member name="T:Core.Tools.MathUtil">
            <summary>
            Utils related to Math operation.
            </summary>
        </member>
        <member name="M:Core.Tools.MathUtil.GetDecimalValue(System.Decimal)">
            <summary>
            Return only the decimal value of a decimal. Ex: 2.001 will return 0.001; -2.001 will return 0.001
            </summary>
            <param name="value">The value from which to get the decimal</param>
            <returns>The decimal value in absolute value</returns>
        </member>
        <member name="M:Core.Tools.MathUtil.GetDecimalValue(System.Nullable{System.Decimal})">
            <summary>
            Return only the decimal value of a decimal. Ex: 2.001 will return 0.001; -2.001 will return 0.001
            </summary>
            <param name="value">The value from which to get the decimal</param>
            <returns>The decimal value in absolute value</returns>
        </member>
        <member name="T:System.EnumUtil">
            <summary>
            Enum utility methods
            </summary>
        </member>
        <member name="M:System.EnumUtil.Parse``1(System.String)">
            <summary>
            Parses the specified this enum.
            </summary>
            <typeparam name="T">The Enum type</typeparam>
            <param name="enumName">Name of the enum.</param>
            <returns>A typed Enum</returns>
        </member>
        <member name="M:Core.Schema.CoreData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Schema.CoreData"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Core.Schema.CoreData.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Schema.CoreData"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="ownsConnection">if set to <c>true</c> [owns connection].</param>
        </member>
        <member name="T:Core.Tools.ReflectionUtil">
            <summary>
            This Class is an helper that uses the Reflection to do general tasks.
            </summary>
        </member>
        <member name="F:Core.Tools.ReflectionUtil.PUBLIC_NONPUBLIC_INSTANCE">
            <summary>Indicates public nonpublic instance.</summary>
        </member>
        <member name="F:Core.Tools.ReflectionUtil.PUBLIC_INSTANCE">
            <summary>Indicates public instance.</summary>
        </member>
        <member name="M:Core.Tools.ReflectionUtil.GetFirstDifferentObject``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Just return a different object than the original from the given list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="original"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.ReflectionUtil.Equal(System.Object,System.Object)">
            <summary>
            Compare object by there public property.
            </summary>
            <param name="sourceOf">The source of object to be compared.</param>
            <param name="compareTo">The object use to compare to the source.</param>
            <returns>False if not equal or true if so.</returns>
        </member>
        <member name="M:Core.Tools.ReflectionUtil.GetReadablePropertyValue(System.Object,System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            GetRecursively the value of a WriteOnly property as a workaround. When a derived class overrides only the setter, 
            the reflection propertyinfo returns a readonly property rather than giving the getter of the base class.
            </summary>
            <param name="objectOf"></param>
            <param name="classType"></param>
            <param name="propertyName"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
            <remarks>It's not protected because is a sealed class.</remarks>
        </member>
        <member name="M:Core.Tools.ReflectionUtil.GetHashCode(System.Object)">
            <summary>
            Get hashcodes recursively by using reflection. Bad Idea for performance, but it can save a lot of time during project startup.
            </summary>
            <param name="sourceOf">The source of object to get hashcode from.</param>
            <returns>Hashcode.</returns>
        </member>
        <member name="M:Core.Tools.ReflectionUtil.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Set an object property value if the property is found and if it is accessible in the given object.
            </summary>
            <param name="theObject">The object where to set the value</param>
            <param name="propertyName">The property to change</param>
            <param name="valueToSet">The value to set</param>
            <returns>True if the property have been change. Else false if the property wasn't found or if it's not accessible"/></returns>
        </member>
        <member name="T:Core.Tools.EmbeddedIconInfo">
            <summary>
            Structure that encapsulates basic information of icon embedded in a file.
            </summary>
        </member>
        <member name="M:Core.Tools.IconUtil.GetFileTypeAndIcon">
            <summary>
            Gets registered file types and their associated icon in the system.
            </summary>
            <returns>Returns a hash table which contains the file extension as keys, the icon file and param as values.</returns>
        </member>
        <member name="M:Core.Tools.IconUtil.ExtractIconFromFile(System.String)">
            <summary>
            Extract the icon from file.
            </summary>
            <param name="fileAndParam">The params string, 
            such as ex: "C:\\Program Files\\NetMeeting\\conf.exe,1".</param>
            <returns>This method always returns the large size of the icon (may be 32x32 px).</returns>
        </member>
        <member name="M:Core.Tools.IconUtil.ExtractIconFromFile(System.String,System.Boolean)">
            <summary>
            Extract the icon from file.
            </summary>
            <param name="fileAndParam">The params string, 
            such as ex: "C:\\Program Files\\NetMeeting\\conf.exe,1".</param>
            <param name="isLarge">
            Determines the returned icon is a large (may be 32x32 px) 
            or small icon (16x16 px).</param>
        </member>
        <member name="M:Core.Tools.IconUtil.getEmbeddedIconInfo(System.String)">
            <summary>
            Parses the parameters string to the structure of EmbeddedIconInfo.
            </summary>
            <param name="fileAndParam">The params string, 
            such as ex: "C:\\Program Files\\NetMeeting\\conf.exe,1".</param>
            <returns></returns>
        </member>
        <member name="T:Core.Schema.Message">
            <summary>
            Represents a Message entity.
            Database object : Core.MessageQueues
            </summary>
        </member>
        <member name="M:Core.Schema.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Schema.Message"/> class.
            </summary>
        </member>
        <member name="M:Core.Schema.Message.#ctor(System.Int64,System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.Int32,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Schema.Message"/> class.
            </summary>
            <param name="Id">The id.</param>
            <param name="Created">The created.</param>
            <param name="Treated">The treated.</param>
            <param name="QueueName">Name of the queue.</param>
            <param name="Destination">The destination.</param>
            <param name="Priority">The priority.</param>
            <param name="Content">The content.</param>
            <param name="ErrorInfo">The error info.</param>
            <param name="Sender">The sender.</param>
            <param name="Activation">The activation.</param>
        </member>
        <member name="M:Core.Schema.Message.AddErrorInfo(System.String)">
            <summary>
            Adds new error info.
            </summary>
        </member>
        <member name="P:Core.Schema.Message.ContentObject">
            <summary>
            The message content as an object.
            </summary>
        </member>
        <member name="P:Core.Schema.Message.ContentXml">
            <summary>
            The message content as an xml document.
            </summary>
        </member>
        <member name="T:System.EnumerableExtensions">
            <summary>
            Represents all enumerable extensions.
            </summary>
        </member>
        <member name="M:System.EnumerableExtensions.BuildString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{System.Int32,``0,System.String})">
            <summary>
            Builds a string using the items in an enumerable.
            </summary>
            <typeparam name="T">The enumerable type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="sepparator">The sepparator.</param>
            <param name="getString">The get string.</param>
            <returns></returns>
        </member>
        <member name="M:System.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.EnumerableExtensions.ToCastDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a CastDictionary from an Enumerable
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A CastDictionary</returns>
        </member>
        <member name="M:System.EnumerableExtensions.ToCastList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a CastList from an Enumerable
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>A CastList</returns>
        </member>
        <member name="T:Core.CoreContextSettings">
            <summary>
            The Core.CoreContextSettings class has config of the main context class that maintains the states of all operations that are stateful.
            </summary>
        </member>
        <member name="M:Core.CoreContextSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Core.CoreContextSettings"/> class.
            </summary>
        </member>
        <member name="M:Core.CoreContextSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.CoreContextSettings"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="P:Core.CoreContextSettings.DefaultConnectionString">
            <summary>
            Gets or sets the default connection string.
            </summary>
            <value>
            The default connection string.
            </value>
        </member>
        <member name="P:Core.CoreContextSettings.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="M:Core.Tools.ScreenCaptureUtil.CaptureScreen">
            <summary>
            Creates an Image object containing a screen shot of the entire desktop
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.ScreenCaptureUtil.CaptureWindow(System.IntPtr)">
            <summary>
            Creates an Image object containing a screen shot of a specific window
            </summary>
            <param name="handle">The handle to the window. (In windows forms, this is obtained by the Handle property)</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.ScreenCaptureUtil.CaptureWindowToFile(System.IntPtr,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Captures a screen shot of a specific window, and saves it to a file
            </summary>
            <param name="handle"></param>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:Core.Tools.ScreenCaptureUtil.CaptureScreenToFile(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Captures a screen shot of the entire desktop, and saves it to a file
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Services.WindowsServiceInstallerBase.#ctor">
            <summary>
            Public Constructor for Installer.
            </summary>
        </member>
        <member name="M:Core.Services.WindowsServiceInstallerBase.Install(System.Collections.IDictionary)">
            <summary>
            Install.
            </summary>
            <param name="stateSaver">The state saver.</param>
        </member>
        <member name="P:Core.Services.WindowsServiceInstallerBase.ServiceInstaller">
            <summary>
            Gets the service installer.
            </summary>
        </member>
        <member name="P:Core.Services.WindowsServiceInstallerBase.ServiceProcessInstaller">
            <summary>
            Gets the service process installer.
            </summary>
        </member>
        <member name="M:Core.Schema.ApplicationParameterValue.ChangeType(System.Object,System.Type)">
            <summary>
            Change type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>A System.Object.</returns>
        </member>
        <member name="T:Core.Tools.UriUtil">
            <summary>
            Utility class for Uri.
            </summary>
        </member>
        <member name="F:Core.Tools.UriUtil.REGEX_URLVALIDATION">
            <summary>
            Regex to validate if a url have a valid format.
            </summary>
        </member>
        <member name="F:Core.Tools.UriUtil.REGEX_FILEPATHVALIDATION1">
            <summary>
            Regex to validate if a filepath have a valid format.
            </summary>
        </member>
        <member name="F:Core.Tools.UriUtil.REGEX_ISURL">
            <summary>
            Regex to validate if the string is a URL
            </summary>
        </member>
        <member name="F:Core.Tools.UriUtil.REGEX_ISFILEPATH">
            <summary>
            Regex to validate if the string is a filepath
            </summary>
        </member>
        <member name="M:Core.Tools.UriUtil.IsUriValid(System.String)">
            <summary>
            Valid if the given uriString is ok. A uriString can be a filepath (including file name) OR a url.
            </summary>
            <param name="uriString">The uriString to valid</param>
            <returns>True if valid false if not</returns>
            <remarks>
            This will not validate if you have access to ressource.
            </remarks>
        </member>
        <member name="M:Core.Tools.UriUtil.IsUrlValid(System.String)">
            <summary>
            Valid if the given url is ok.
            </summary>
            <param name="url">The url to valid</param>
            <returns>True if valid false if not</returns>
            <remarks>
            This will not validate if you have access to ressource.
            </remarks>
        </member>
        <member name="M:Core.Tools.UriUtil.IsFilePathValid(System.String)">
            <summary>
            Valid if the given filePath is ok.
            </summary>
            <param name="filePath">The filePath to valid</param>
            <returns>True if valid false if not</returns>
            <remarks>
            This will not validate if you have access to ressource.
            </remarks>
        </member>
        <member name="M:Core.Tools.UriUtil.IsFilePathAccessible(System.String)">
            <summary>
            Verify if we have access to the given file.
            </summary>
            <param name="filePath">File path to validate</param>
            <returns>True if we have read access to the file</returns>
        </member>
        <member name="M:Core.Tools.UriUtil.IsUrlAccessible(System.String)">
            <summary>
            Verify if we have access to the given url.
            </summary>
            <param name="url">Url to validate</param>
            <returns>True if we have read access to the url</returns>
        </member>
        <member name="M:Core.Tools.UriUtil.IsUrl(System.String)">
            <summary>
            Check if the given string is a URL.
            </summary>
            <param name="uriString">The string representing the Uri</param>
            <returns>True if uriString fit the Url pattern</returns>
        </member>
        <member name="M:Core.Tools.UriUtil.IsFilePath(System.String)">
            <summary>
            Check if the given string is a filepath.
            </summary>
            <param name="uriString">The string representing the Uri</param>
            <returns>True if uriString fit the filepath pattern</returns>
        </member>
        <member name="M:Core.Tools.UriUtil.IsUri(System.String)">
            <summary>
            Check if the given string is a Uri.
            </summary>
            <param name="uriString">The string representing the Uri</param>
            <returns>True if uriString fit the Url pattern</returns>
        </member>
        <member name="T:Core.Tools.CollectionUtil">
            <summary>
            This class containt different collection utility.
            </summary>
        </member>
        <member name="M:Core.Tools.CollectionUtil.FromIListToGenericIList``1(System.Collections.IList)">
            <summary>
            Convert IList to generic IList
            </summary>
            <typeparam name="T">Type of the IList returned</typeparam>
            <param name="iList">IList to convert</param>
            <returns>generic IList converted</returns>
        </member>
        <member name="M:Core.Tools.CollectionUtil.AddItemToReadOnlyList``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Return a new instance of a ReadOnlyList with the item added.
            </summary>
            <typeparam name="T">Type of the item to add.</typeparam>
            <param name="readOnlyList">ReadOnly list to add an item to.</param>
            <param name="item">Item to add.</param>
            <returns>ReadOnly List.</returns>
        </member>
        <member name="M:Core.Tools.CollectionUtil.RemoveItemFromReadOnlyList``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Return a new instance of a ReadOnlyList with the item added.
            </summary>
            <typeparam name="T">Type of the item to add.</typeparam>
            <param name="readOnlyList">ReadOnly list to add an item to.</param>
            <param name="item">Item to add.</param>
            <returns>ReadOnly List.</returns>
        </member>
        <member name="M:Core.Tools.CollectionUtil.CompareEnumerableItems(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Compare items and count of two IEnumerable. 
            </summary>
            <param name="sourceEnumerable"></param>
            <param name="compareEnumerable"></param>
            <returns>Return true if all items are equals and both IEnumerable count are equal.</returns>
        </member>
        <member name="M:Core.Tools.CollectionUtil.GetDictionaryFromList``2(System.Collections.Generic.IList{``1},Core.Tools.CollectionUtil.CreateKey{``0,``1})">
            <summary>
            Gets dictionary from list.
            </summary>
            <param name="list">The list.</param>
            <param name="createKey">The create key.</param>
            <returns>A System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.</returns>
        </member>
        <member name="M:Core.Tools.CollectionUtil.GetListFromIList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets List from IList.
            </summary>
            <param name="list">The list.</param>
            <returns>A System.Collections.Generic.List&lt;T&gt;.</returns>
        </member>
        <member name="T:Core.Tools.CollectionUtil.CreateKey`2">
            <summary>
            Represents a method use to create a key for a dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value that the key is for.</typeparam>
            <param name="value">The value that the key is for.</param>
            <returns>The value of the key.</returns>
        </member>
        <member name="T:System.XmlNodeExtensions">
            <summary>
            XmlNode extensions methods
            </summary>
        </member>
        <member name="M:System.XmlNodeExtensions.SetValue(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Sets a value for a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <param name="value">The value</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetInt32Value(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an integer value from a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetInt32ValueOrDefault(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an integer value from a specified node or default value
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or default value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetInt32Value(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an integer value from a specified node or <c>null</c>
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetInt64Value(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a long integer value from a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetInt64ValueOrDefault(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a long integer value from a specified node or default value
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or default value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetInt64Value(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a long integer value from a specified node or <c>null</c>
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetStringValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a string value from a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetStringValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a string value from a specified node or <c>null</c>
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetDateTimeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a date and time value from a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetDateTimeValueOrDefault(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a date and time value from a specified node or default value
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or default value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetDateTimeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a date and time value from a specified node or <c>null</c>
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetTimeSpanValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a TimeSpan value from a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetTimeSpanValueOrDefault(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a TimeSpan value from a specified node or default value
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or default value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetTimeSpanValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a TimeSpan value from a specified node or <c>null</c>
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetDoubleValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a double float value from a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetDoubleValueOrDefault(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a double float value from a specified node or default value
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or default value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetDoubleValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a double float value from a specified node or <c>null</c>
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetBooleanValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a boolean value from a specified node
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetBooleanValueOrDefault(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a boolean value from a specified node or default value
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or default value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetBooleanValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets a boolean value from a specified node or <c>null</c>
            </summary>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetEnumValue``1(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an enum type value from a specified node
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value as an enum</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.GetEnumValueOrDefault``1(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an enum type value from a specified node or default enum value
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value as an enum or default enum value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.TryGetEnumValue``1(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an enum type value from a specified node or <c>null</c>
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="parentnode">(Extension method) A node to search from</param>
            <param name="xpath">An XPath query that specifies the node to get a value from</param>
            <returns>The node's value as an enum or <c>null</c></returns>
        </member>
        <member name="M:System.XmlNodeExtensions.SetValues``1(System.Xml.XmlNode,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.Action{System.Xml.XmlNode,System.String,``0})">
            <summary>
            Sets values from a collection to this xml node.
            </summary>
            <typeparam name="T">The collection value type</typeparam>
            <param name="xml">The XML node to set values to.</param>
            <param name="removeUnusedNodes"><c>true</c> if you want to remove unused xml nodes (cleanup); otherwise <c>false</c>.</param>
            <param name="collectionNodeName">Name of the collection node.</param>
            <param name="indexedCollection">An indexed collection. (you can use .ToDictionary() on any enumerable to create your index)</param>
            <param name="itemNodeName">Name of the item node.</param>
            <param name="keyName">Name of the key.</param>
            <param name="write">An action to undertake for each item to write.</param>
        </member>
        <member name="M:System.XmlNodeExtensions.GetValues``1(System.Xml.XmlNode,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.Action{System.Xml.XmlNode,System.String,``0},System.Func{System.Xml.XmlNode,System.String,``0})">
            <summary>
            Gets values from this xml node into a collection.
            </summary>
            <typeparam name="T">The collection value type</typeparam>
            <param name="xml">The XML node to get values from.</param>
            <param name="removeItemsNotFoundInXml"><c>true</c> if you want to remove items from the collection not found in the xml node (cleanup); otherwise <c>false</c>.</param>
            <param name="collectionNodeName">Name of the collection node.</param>
            <param name="dictionary">A dictionary for the items that will be read.</param>
            <param name="itemNodeName">Name of the item node.</param>
            <param name="keyName">Name of the key.</param>
            <param name="read">An action to undertake for each item to read.</param>
            <param name="create">Called when a new item needs to be created or <c>null</c> to disable.</param>
        </member>
        <member name="M:System.XmlNodeExtensions.GetValues``1(System.Xml.XmlNode,System.String,System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.Action{System.Xml.XmlNode,System.String,``0})">
            <summary>
            Gets values from this xml node into a collection.
            </summary>
            <typeparam name="T">The collection value type</typeparam>
            <param name="xml">The XML node to get values from.</param>
            <param name="collectionNodeName">Name of the collection node.</param>
            <param name="indexedCollection">An indexed collection. (you can use .ToDictionary() on any enumerable to create your index)</param>
            <param name="itemNodeName">Name of the item node.</param>
            <param name="keyName">Name of the key.</param>
            <param name="read">An action to undertake for each item to read.</param>
        </member>
        <member name="M:System.XmlNodeExtensions.GetValues``1(System.Xml.XmlNode,System.String,System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.Action{System.Xml.XmlNode,System.String,``0},System.Func{System.Xml.XmlNode,System.String,``0},System.Action{System.Xml.XmlNode,System.String,``0})">
            <summary>
            Gets values from this xml node into a collection.
            </summary>
            <typeparam name="T">The collection value type</typeparam>
            <param name="xml">The XML node to get values from.</param>
            <param name="collectionNodeName">Name of the collection node.</param>
            <param name="indexedCollection">An indexed collection. (you can use .ToDictionary() on any enumerable to create your index)</param>
            <param name="itemNodeName">Name of the item node.</param>
            <param name="keyName">Name of the key.</param>
            <param name="read">An action to undertake for each item to read.</param>
            <param name="create">Called when a new item needs to be created or <c>null</c> to disable.</param>
            <param name="add">Called when a new item needs to be added to the collection or <c>null</c> to disable.</param>
        </member>
        <member name="M:System.XmlNodeExtensions.GetValues``1(System.Xml.XmlNode,System.String,System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.Action{System.Xml.XmlNode,System.String,``0},System.Func{System.Xml.XmlNode,System.String,``0},System.Action{System.Xml.XmlNode,System.String,``0},System.Action{System.String,``0})">
            <summary>
            Gets values from this xml node into a collection.
            </summary>
            <typeparam name="T">The collection value type</typeparam>
            <param name="xml">The XML node to get values from.</param>
            <param name="collectionNodeName">Name of the collection node.</param>
            <param name="indexedCollection">An indexed collection. (you can use .ToDictionary() on any enumerable to create your index)</param>
            <param name="itemNodeName">Name of the item node.</param>
            <param name="keyName">Name of the key.</param>
            <param name="read">An action to undertake for each item to read.</param>
            <param name="create">Called when a new item needs to be created or <c>null</c> to disable.</param>
            <param name="add">Called when a new item needs to be added to the collection or <c>null</c> to disable.</param>
            <param name="remove">Called when an item needs to be removed from the collection or <c>null</c> to disable.</param>
        </member>
        <member name="M:System.XmlNodeExtensions.GetValues``1(System.Xml.XmlNode,System.Boolean,System.String,System.Collections.Generic.ICollection{``0},System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.Action{System.Xml.XmlNode,System.String,``0},System.Func{System.Xml.XmlNode,System.String,``0})">
            <summary>
            Gets values from this xml node into a collection.
            </summary>
            <typeparam name="T">The collection value type</typeparam>
            <param name="xml">The XML node to get values from.</param>
            <param name="removeItemsNotFoundInXml"><c>true</c> if you want to remove items from the collection not found in the xml node (cleanup); otherwise <c>false</c>.</param>
            <param name="collectionNodeName">Name of the collection node.</param>
            <param name="collection">A collection for the items that will be read.</param>
            <param name="indexedCollection">An indexed collection. (you can use .ToDictionary() on any enumerable to create your index)</param>
            <param name="itemNodeName">Name of the item node.</param>
            <param name="keyName">Name of the key.</param>
            <param name="read">An action to undertake for each item to read.</param>
            <param name="create">Called when a new item needs to be created or <c>null</c> to disable.</param>
        </member>
        <member name="M:System.XmlNodeExtensions.GetFormatedString(System.Xml.XmlNode)">
            <summary>
            Gets a formated string of this xml node and all children.
            </summary>
            <param name="node">(Extension method) The node to format</param>
            <returns>The node's value</returns>
        </member>
        <member name="M:System.XmlNodeExtensions.Exists(System.Xml.XmlNode,System.String)">
            <summary>
            Is node exists.
            </summary>
            <param name="node">The document.</param>
            <param name="path">The path.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Tools.AssemblyHelper.FindAssembly(System.String)">
            <summary>
            Use to find and assambly in the current dommain.
            </summary>
            <param name="AssemblyName">The assembly name to find.</param>
            <returns>An Assembly.</returns>
            <remarks>If the assembly to find is not in the current domain, the method will load
             it but will not include it in the current domain.</remarks>
        </member>
        <member name="T:System.DbCommandExtensions">
            <summary>
            Provide extension method to DbCommand class.
            </summary>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteQuery``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Executes a query and returns the data.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="command">The SQL query command</param>
            <param name="defaultValue">Default return type value</param>
            <returns>Returns the query results</returns>
            <example>
            <code>
            var list = Connection.ExecuteQuery(new {
                    StringField = default(string),
                    IntegerField = default(int),
                    NumberField = default(double)}, 
            @"select t1.StringField, t1.IntegerField, t1.NumberField
            from table1 t1 left join table2 t2 on t1.key = t2.key
            where t1.name = ?", "foo");
            foreach(var item in list) {
                Console.WriteLine(item.StringField + item.IntegerField.ToString() + item.NumberField.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteQuery``1(System.Data.Common.DbCommand,System.Func{System.Object[],``0})">
            <summary>
            Executes a query and returns the data.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="command">The SQL query command</param>
            <param name="constructor">A constructor delegate for your objects</param>
            <returns>Returns the query results</returns>
            <example>
            <code>
            var list = Connection.ExecuteQuery(new {
                    StringField = default(string),
                    IntegerField = default(int),
                    NumberField = default(double)}, 
            @"select t1.StringField, t1.IntegerField, t1.NumberField
            from table1 t1 left join table2 t2 on t1.key = t2.key
            where t1.name = ?", "foo");
            foreach(var item in list) {
                Console.WriteLine(item.StringField + item.IntegerField.ToString() + item.NumberField.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteQuery``1(System.Data.Common.DbCommand,Core.Collections.CastDictionary{System.String,System.Data.Objects.DataClasses.EntityObject},System.Func{Core.Collections.CastDictionary{System.String,System.Data.Objects.DataClasses.EntityObject},System.Object[],``0})">
            <summary>
            Executes a query and returns the data.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="command">The SQL query command</param>
            <param name="cache">An object cache</param>
            <param name="constructor">A constructor delegate for your objects</param>
            <returns>Returns the query results</returns>
            <example>
            <code>
            var list = Connection.ExecuteQuery(new {
                    StringField = default(string),
                    IntegerField = default(int),
                    NumberField = default(double)}, 
            @"select t1.StringField, t1.IntegerField, t1.NumberField
            from table1 t1 left join table2 t2 on t1.key = t2.key
            where t1.name = ?", "foo");
            foreach(var item in list) {
                Console.WriteLine(item.StringField + item.IntegerField.ToString() + item.NumberField.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteScalarQuery``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Executes a query and returns the scalar result.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>defaultValue</c></typeparam>
            <param name="command">The SQL query command</param>
            <param name="defaultValue">Default return type value</param>
            <returns>Returns the scalar result</returns>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteScalarQuery(System.Data.Common.DbCommand,System.Type,System.Object)">
            <summary>
            Executes a query and returns the scalar result.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="command">The SQL query command</param>
            <param name="type">the value type</param>
            <param name="defaultValue">Default return value</param>
            <returns>Returns the scalar result</returns>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteSingleRowQuery``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Executes a query and returns the first row.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="command">The SQL query command</param>
            <param name="defaultValue">Default return type value</param>
            <returns>Returns the first query result</returns>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteSingleRowQuery``1(System.Data.Common.DbCommand,System.Func{System.Object[],``0})">
            <summary>
            Executes a query and returns the first row.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="command">The SQL query command</param>
            <param name="constructor">A constructor delegate for your objects</param>
            <returns>Returns the first query result</returns>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteSingleRowQuery``1(System.Data.Common.DbCommand,Core.Collections.CastDictionary{System.String,System.Data.Objects.DataClasses.EntityObject},System.Func{Core.Collections.CastDictionary{System.String,System.Data.Objects.DataClasses.EntityObject},System.Object[],``0})">
            <summary>
            Executes a query and returns the first row.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="command">The SQL query command</param>
            <param name="cache">An object cache</param>
            <param name="constructor">A constructor delegate for your objects</param>
            <returns>Returns the first query result</returns>
        </member>
        <member name="M:System.DbCommandExtensions.ExecuteRawQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes a query and returns the data.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="command">The SQL query command</param>
            <returns>Returns the query results</returns>
        </member>
        <member name="T:Core.Tools.NetworkUtil">
            <summary>
            This class contains different network utility.
            </summary>
        </member>
        <member name="M:Core.Tools.NetworkUtil.IsTerminalServerSession">
            <summary>
            Is terminal server session.
            </summary>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Tools.NetworkUtil.GetTerminalServerClientName">
            <summary>
            Gets the name of the terminal server client machine.
            This works only on standard terminal server sessions,
            in other cases an empty string ("") will be returned.
            </summary>
            <returns>Name of the terminal server client machine, empty string ("") on local client or console TS session.</returns>
        </member>
        <member name="M:Core.Tools.NetworkUtil.SendEmail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send email.
            </summary>
            <param name="from">The from.</param>
            <param name="to">The to.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="smtpHost">The smtp host.</param>
        </member>
        <member name="T:Core.Features.ParameterFeature">
            <summary>
            Parameter feature.
            </summary>
        </member>
        <member name="T:Core.Features.FeatureBase">
            <summary>
            Represents a base FW feature.
            </summary>
        </member>
        <member name="F:Core.Features.FeatureBase._Context">
            <summary>Field for Context.</summary>
        </member>
        <member name="M:Core.Features.FeatureBase.#ctor(Core.CoreContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Core.Features.FeatureBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Core.Features.FeatureBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Core.Features.FeatureBase.OwningTheContext">
            <summary>
            Gets or sets a value indicating whether we own the context. 
            When owning the context we are in charge of disposing it
            </summary>
        </member>
        <member name="P:Core.Features.FeatureBase.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="M:Core.Features.ParameterFeature.#ctor(Core.CoreContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Features.ParameterFeature"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Core.Features.ParameterFeature.#ctor(Core.CoreContext,System.DateTime)">
            <summary>
            Prevents a default instance of the <see cref="T:Core.Features.ParameterFeature"/> class from being created.
            </summary>
            <param name="context">The context.</param>
            <param name="paramDateTime">The param date time.</param>
        </member>
        <member name="M:Core.Features.ParameterFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Features.ParameterFeature"/> class.
            </summary>
        </member>
        <member name="M:Core.Features.ParameterFeature._Caching_GetApplicationParameter(System.String)">
            <summary>
            For caching get named parameter values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.Get``1(System.String)">
            <summary>
            Gets a named parameter value
            </summary>
            <typeparam name="T">The type of parameter value.</typeparam>
            <param name="paramName">The parameter name.</param>
            <returns>Returns a named parameter value</returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.TryGet``1(System.String)">
            <summary>
            Gets a named parameter value
            </summary>
            <typeparam name="T">The type of parameter value.</typeparam>
            <param name="paramName">The parameter name.</param>
            <returns>Returns a named parameter value</returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.RawTryGet(System.String)">
            <summary>
            Gets a named parameter value
            </summary>
            <param name="paramName">The parameter name.</param>
            <returns>Returns a named parameter value</returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.Get``1(System.String,``0)">
            <summary>
            Gets a named parameter value and creates it if not found
            </summary>
            <typeparam name="T">The type of parameter value.</typeparam>
            <param name="paramName">The parameter name.</param>
            <param name="defaultValue">The default parameter value if it needs to be created</param>
            <returns>Returns a named parameter value</returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.GetTemporary``1(System.String)">
            <summary>
            Gets a named parameter value if found or null
            </summary>
            <typeparam name="T">The type of parameter value.</typeparam>
            <param name="paramName">The parameter name.</param>
            <returns>Returns a named parameter value</returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.GetTemporary``1(System.String,``0)">
            <summary>
            Gets a named parameter value and creates it if not found
            </summary>
            <typeparam name="T">The type of parameter value.</typeparam>
            <param name="paramName">The parameter name.</param>
            <param name="defaultValue">The default parameter value if it needs to be created</param>
            <returns>Returns a named parameter value</returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.GetTemporaryObject``1(System.String,``0)">
            <summary>
            Gets a named parameter value and creates it if not found
            </summary>
            <typeparam name="T">The type of parameter value.</typeparam>
            <param name="paramName">The parameter name.</param>
            <param name="defaultObj">The default parameter value if it needs to be created</param>
            <returns>Returns a named parameter value</returns>
        </member>
        <member name="M:Core.Features.ParameterFeature.Set(System.String,System.Object)">
            <summary>
            Sets a named parameter value and creates it if not found
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="paramValue">The parameter value.</param>
        </member>
        <member name="M:Core.Features.ParameterFeature.Set(System.String,System.Object,System.DateTime)">
            <summary>
            Sets a named parameter value and creates it if not found
            </summary>
            <param name="paramName">Name of the param.</param>
            <param name="paramValue">The param value.</param>
            <param name="startingDateTime">The starting date time.</param>
        </member>
        <member name="M:Core.Features.ParameterFeature.SetTemporary(System.String,System.Object)">
            <summary>
            Sets a named parameter value and creates it if not found
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="paramValue">The parameter value.</param>
        </member>
        <member name="M:Core.Features.ParameterFeature.SetTemporaryObject(System.String,System.Object)">
            <summary>
            Sets a named parameter value and creates it if not found
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="paramValue">The parameter value.</param>
        </member>
        <member name="M:Core.Features.ParameterFeature.FlushAllTemporaries">
            <summary>
            Flushes all temporaries.
            </summary>
        </member>
        <member name="T:Core.Tools.TypeUtil">
            <summary>
            Provides helper methods for type.
            </summary>
        </member>
        <member name="M:Core.Tools.TypeUtil.ChangeType``1(System.Object)">
            <summary>
            Changes the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.ChangeType(System.Object,System.Type)">
            <summary>
            Changes the type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.ChangeTypeForDB(System.Object,System.Type)">
            <summary>
            Changes the type for use with setting a value in a DataRow object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.ChangeTypeForDB(System.Object,System.Data.DbType)">
            <summary>
            Changes the type for use with setting a value in a DataRow object.
            </summary>
            <param name="value">The value.</param>
            <param name="dbType">The db type.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.EnsureTypeForDB(System.Object)">
            <summary>
            Ensures that a type is ok for use with setting a value in a DataRow object.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.TypeToDbType(System.Type)">
            <summary>
            Convert a type to a DbType.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.DbTypeToType(System.Data.DbType)">
            <summary>
            Convert a type to a DbType.
            </summary>
            <param name="dbType">The db type.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.GetConstructor(System.Type,System.Int32,System.Reflection.ConstructorInfo@,System.Reflection.ParameterInfo[]@)">
            <summary>
            Gets a constructor that matches a parameter count.
            </summary>
            <param name="type">The type to get a constructor of</param>
            <param name="paramCount">The parameter count to match</param>
            <param name="constructor">The constructor that was found</param>
            <param name="parameters">The parameters of the constructor that was found</param>
        </member>
        <member name="M:Core.Tools.TypeUtil.IsNumericType(System.Type)">
            <summary>
            Is numeric type.
            </summary>
            <param name="type">The type.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.IsNullableType(System.Type)">
            <summary>
            Is nullable type.
            </summary>
            <param name="type">The type.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Tools.TypeUtil.GetTypeOf(System.String)">
            <summary>
            Gets a type from any assemblies matching a simple type name.
            </summary>
            <param name="name">The type name to get.</param>
            <returns>The Type that was found or throw if not found.</returns>
        </member>
        <member name="F:Core.Tools.TypeUtil._TypeDictionary">
            <summary>Field for type dictionary.</summary>
        </member>
        <member name="M:Core.Tools.TypeUtil.GetTypeOf(System.String,System.Boolean)">
            <summary>
            Gets a type from any assemblies matching a simple type name.
            </summary>
            <param name="name">The type name to get.</param>
            <param name="throwIfNotFound">Throw if not found.  If false will return null.</param>
            <returns>The Type that was found or null.</returns>
        </member>
        <member name="P:Core.Tools.TypeUtil.TypeDictionary">
            <summary>
            Gets the type dictionary.
            </summary>
        </member>
        <member name="T:Core.Tools.SerializationUtil">
            <summary>
            Represents a serialization util.
            </summary>
        </member>
        <member name="M:Core.Tools.SerializationUtil.Clone``1(``0)">
            <summary>
            Clone.
            </summary>
            <param name="source">The source.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Core.Tools.SerializationUtil.ObjectToString(System.Object)">
            <summary>
            Serializes objects to string.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.SerializationUtil.StringToObject(System.String)">
            <summary>
            Deserializes strings to object.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.SerializationUtil.StringToObject``1(System.String)">
            <summary>
            Deserializes strings to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Core.Tools.SerializationUtil.CloneDataContract(System.Object)">
            <summary>
            Clones an object with a data contract.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="P:Core.Tools.SerializationUtil.DataContractSerializer">
            <summary>
            Gets or sets the data contract serializer.
            </summary>
            <value>The data contract serializer.</value>
        </member>
        <member name="P:Core.Tools.SerializationUtil.MemoryStream">
            <summary>
            Gets the memory stream.
            </summary>
            <value>The memory stream.</value>
        </member>
        <member name="T:Core.Tools.SecurityUtil">
            <summary>
            Provides helper methods for security.
            </summary>
        </member>
        <member name="M:Core.Tools.SecurityUtil.SetPrincipalPolicy">
            <summary>
            Sets principal policy.
            </summary>
        </member>
        <member name="M:Core.Tools.SecurityUtil.GetIdentityName">
            <summary>
            Gets identity name.
            </summary>
            <returns>A System.String.</returns>
        </member>
        <member name="M:Core.Tools.SecurityUtil.GetIdentity">
            <summary>
            Gets the identity.
            </summary>
            <returns>A System.String.</returns>
        </member>
        <member name="M:Core.Tools.SecurityUtil.RunAs(System.String,System.String,System.String,System.Action)">
            <summary>
            Runs a network task as another user.
            </summary>
            <param name="domain">The domain.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="task">The task.</param>
        </member>
        <member name="M:Core.Tools.SecurityUtil.RunAs(System.Security.Principal.WindowsIdentity,System.Action)">
            <summary>
            Runs a task as another user.
            </summary>
            <param name="identity">The identity.</param>
            <param name="task">The task.</param>
        </member>
        <member name="M:Core.Tools.SecurityUtil.HasWriteAccess(System.String)">
            <summary>
            Has write access.
            </summary>
            <param name="fullPathDDirectory">The full path d directory.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="M:Core.Tools.SecurityUtil.HasWriteAccess(System.String,System.Exception@)">
            <summary>
            Has write access.
            </summary>
            <param name="fullPathDDirectory">The full path d directory.</param>
            <param name="ex">The ex.</param>
            <returns>A System.Boolean.</returns>
        </member>
        <member name="T:Core.Services.WindowsServiceBase">
            <summary>
            Represents a windows service base.
            </summary>
        </member>
        <member name="M:Core.Services.WindowsServiceBase.#ctor">
            <summary>
            Creates a service broker
            </summary>
        </member>
        <member name="M:Core.Services.WindowsServiceBase.Execute">
            <summary>
            Main service execution entry.
            </summary>
            <example>
            <code>
            public override void Execute() {
                IsRunning = true;
                DateTime utcNextExecute = DateTime.UtcNow;
                while (!StopRequested) {
                    if (DateTime.UtcNow >= utcNextExecute) {
                        try {
                            //MyCode
                            utcNextExecute = DateTime.UtcNow.AddMinutes(1);
                        } catch (Exception exception) {
                            // TODO: Use EnterpriseLib for logging
                            System.Diagnostics.EventLog.WriteEntry(
                                ServiceName + ".Execute",
                                "-- " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " --\r\n" + exception.ToString(),
                                System.Diagnostics.EventLogEntryType.Error);
                            utcNextExecute = DateTime.UtcNow.AddSeconds(15);
                        }
                    }
                    Thread.Sleep(1000);
                }
                IsRunning = false;
            }
            </code>
            </example>
        </member>
        <member name="M:Core.Services.WindowsServiceBase.OnExecute">
            <summary>
            On execute.
            </summary>
        </member>
        <member name="M:Core.Services.WindowsServiceBase.Startup(System.String[])">
            <summary>
            Starts the windows service.
            </summary>
        </member>
        <member name="F:Core.Services.WindowsServiceBase._ServiceStatus">
            <summary>Field for ServiceStatus.</summary>
        </member>
        <member name="M:Core.Services.WindowsServiceBase.OnStart(System.String[])">
            <summary>
            Entry point of the service.
            </summary>
            <param name="args">Optional startup arguments.</param>
        </member>
        <member name="M:Core.Services.WindowsServiceBase.OnStop">
            <summary>
            Exit point of the service.  Cleanup ressources and wait for the main service thread to finish
            </summary>
        </member>
        <member name="M:Core.Services.WindowsServiceBase.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Represents the method that will handle the UnhandledException event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.UnhandledExceptionEventArgs that contains the event data.</param>
        </member>
        <member name="E:Core.Services.WindowsServiceBase.Starting">
            <summary>
            Occurs when starting.
            </summary>
        </member>
        <member name="E:Core.Services.WindowsServiceBase.Stopping">
            <summary>
            Occurs when stopping.
            </summary>
        </member>
        <member name="P:Core.Services.WindowsServiceBase.IsRunning">
            <summary>
            Gets a value indicating whether the service is running.
            </summary>
        </member>
        <member name="P:Core.Services.WindowsServiceBase.StopRequested">
            <summary>
            Gets or sets a value indicating whether the service stop requested.
            </summary>
        </member>
        <member name="P:Core.Services.WindowsServiceBase.StartUpTimeout">
            <summary>
            Gets or sets the start up timeout.
            </summary>
            <value>The start up timeout.</value>
        </member>
        <member name="T:System.ServiceEndpointExtensions">
            <summary>
            Represents a serializable expression.
            </summary>
        </member>
        <member name="M:System.ServiceEndpointExtensions.SetCoreSurrogates(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Sets Core serialization surrogates.
            </summary>
            <param name="ep">The ep.</param>
        </member>
        <member name="T:System.AssemblyExtensions">
            <summary>
            Assembly extensions methods
            </summary>
        </member>
        <member name="M:System.AssemblyExtensions.CreateResourceFile(System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Creates a resource file from an assembly to the filesystem.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">The resource name.</param>
            <param name="fileName">The file name.</param>
            <param name="overwriteIfExist">Overwrite if file exist.</param>
        </member>
        <member name="M:System.AssemblyExtensions.GetResourceFileContent(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a resource file from an assembly to the filesystem.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">The resource name.</param>
        </member>
        <member name="T:System.SettingElementCollectionExtensions">
            <summary>
            Represents setting element collection extensions.
            </summary>
        </member>
        <member name="M:System.SettingElementCollectionExtensions.GetSettings(System.String)">
            <summary>
            Gets application settings.
            </summary>
            <param name="configName">The config name.</param>
            <returns>A SettingElementCollection or null.</returns>
        </member>
        <member name="M:System.SettingElementCollectionExtensions.GetXmlSection(System.Configuration.Configuration,System.String)">
            <summary>
            Gets a config section as an XML Document.
            </summary>
            <param name="config">The config.</param>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="M:System.SettingElementCollectionExtensions.GetSetting(System.Configuration.SettingElementCollection,System.String)">
            <summary>
            Gets a setting value.
            </summary>
            <param name="settings">The settings</param>
            <param name="name">The name of the setting to get</param>
            <returns>A setting value or null.</returns>
        </member>
        <member name="T:Core.Tools.DateTimePrecise">
            DateTimePrecise provides a way to get a DateTime that exhibits the
            relative precision of
            System.Diagnostics.Stopwatch, and the absolute accuracy of DateTime.Now.
            Source: http://www.codeproject.com/KB/cs/DateTimePrecise.aspx
            <example>
            <code>
            DateTimePrecise datePrecise = new DateTimePrecise(100);
            Console.WriteLine(datePrecise.Now.ToString());
            </code>
            </example>
        </member>
        <member name="M:Core.Tools.DateTimePrecise.#ctor(System.Int64)">
            Creates a new instance of DateTimePrecise.
            A large value of synchronizePeriodSeconds may cause arithmetic overthrow
            exceptions to be thrown. A small value may cause the time to be unstable.
            A good value is 10.
            synchronizePeriodSeconds = The number of seconds after which the
            DateTimePrecise will synchronize itself with the system clock.
        </member>
        <member name="F:Core.Tools.DateTimePrecise.Stopwatch">
            The internal System.Diagnostics.Stopwatch used by this instance.
        </member>
        <member name="P:Core.Tools.DateTimePrecise.UtcNow">
            Returns the current date and time, just like DateTime.UtcNow.
        </member>
        <member name="P:Core.Tools.DateTimePrecise.Now">
            Returns the current date and time, just like DateTime.Now.
        </member>
        <member name="T:Core.Services.ServiceHostFactory">
            <summary>
            Represents a service factory.
            </summary>
        </member>
        <member name="M:Core.Services.ServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Creates service host.
            </summary>
            <param name="constructorString">The constructor string.</param>
            <param name="baseAddresses">The base addresses.</param>
            <returns>A ServiceHostBase.</returns>
        </member>
        <member name="T:Core.Services.ExpressionSerialization.ExpressionSurrogate">
            <summary>
            Represents an expression surrogate to make it serializable.
            </summary>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.GetCustomDataToExport(System.Type,System.Type)">
            <summary>During schema export operations, inserts annotations into the schema for non-null return values. </summary>
            <returns>An object that represents the annotation to be inserted into the XML schema definition. </returns>
            <param name="clrType">The CLR type to be replaced. </param>
            <param name="dataContractType">The data contract type to be annotated. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)">
            <summary>During schema export operations, inserts annotations into the schema for non-null return values. </summary>
            <returns>An object that represents the annotation to be inserted into the XML schema definition. </returns>
            <param name="memberInfo">The member info to be replaced. </param>
            <param name="dataContractType">The data contract type to be annotated. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.GetDataContractType(System.Type)">
            <summary>During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type. </summary>
            <returns>The <see cref="T:System.Type"/> to substitute for the <paramref name="type"/> value. This type must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> attribute or other mechanisms that the serializer recognizes.</returns>
            <param name="type">The CLR type <see cref="T:System.Type"/> to substitute. </param>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.GetDeserializedObject(System.Object,System.Type)">
            <summary>During deserialization, returns an object that is a substitute for the specified object.</summary>
            <returns>The substituted deserialized object. This object must be of a type that is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> attribute or other mechanisms that the serializer recognizes.</returns>
            <param name="obj">The deserialized object to be substituted.</param>
            <param name="targetType">The <see cref="T:System.Type"/> that the substituted object should be assigned to. </param>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})">
            <summary>Sets the collection of known types to use for serialization and deserialization of the custom data objects. </summary>
            <param name="customDataTypes">A <see cref="T:System.Collections.ObjectModel.Collection`1"/>  of <see cref="T:System.Type"/> to add known types to.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.GetObjectToSerialize(System.Object,System.Type)">
            <summary>During serialization, returns an object that substitutes the specified object. </summary>
            <returns>The substituted object that will be serialized. The object must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> attribute or other mechanisms that the serializer recognizes.</returns>
            <param name="obj">The object to substitute. </param>
            <param name="targetType">The <see cref="T:System.Type"/> that the substituted object should be assigned to.</param>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)">
            <summary>During schema import, returns the type referenced by the schema.</summary>
            <returns>The <see cref="T:System.Type"/> to use for the referenced type.</returns>
            <param name="typeName">The name of the type in schema.</param>
            <param name="typeNamespace">The namespace of the type in schema.</param>
            <param name="customData">The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.ExpressionSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)">
            <summary>Processes the type that has been generated from the imported schema.</summary>
            <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration"/> that contains the processed type.</returns>
            <param name="typeDeclaration">A <see cref="T:System.CodeDom.CodeTypeDeclaration"/> to process that represents the type declaration generated during schema import.</param>
            <param name="compileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit"/> that contains the other code generated during schema import.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Core.CoreContext">
            <summary>
            The Core.CoreContext class is the main context class that maintains the states of all operations that are stateful.
            </summary>
            <remarks>
            This class should always be used within a using statement.
            </remarks>
        </member>
        <member name="M:Core.CoreContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Core.CoreContext"/> class.
            </summary>
        </member>
        <member name="M:Core.CoreContext.#ctor(Core.CoreContextSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.CoreContext"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Core.CoreContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Core.CoreContext.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Core.CoreContext.CoreData">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Core.CoreContext.Cache">
            <summary>
            Gets the cache feature.
            </summary>
        </member>
        <member name="P:Core.CoreContext.Parameter">
            <summary>
            Gets the parameter feature.
            </summary>
        </member>
        <member name="P:Core.CoreContext.Messaging">
            <summary>
            Gets the messaging feature.
            </summary>
        </member>
        <member name="P:Core.CoreContext.Service">
            <summary>
            Gets the service feature.
            </summary>
        </member>
        <member name="T:Core.Tools.XmlDiffResult">
            <summary>
            Represents a xml diff result.
            </summary>
        </member>
        <member name="M:Core.Tools.XmlDiffResult.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="isEqual">The is equal.</param>
            <param name="difference">The difference.</param>
        </member>
        <member name="M:Core.Tools.XmlDiffResult.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="isEqual">The is equal.</param>
        </member>
        <member name="P:Core.Tools.XmlDiffResult.Difference">
            <summary>
            Gets or sets the difference.
            </summary>
        </member>
        <member name="P:Core.Tools.XmlDiffResult.IsEqual">
            <summary>
            Gets or sets a value indicating whether the Core.MES.Framework.IO.XmlDiffResult is equal.
            </summary>
        </member>
        <member name="T:Core.Services.SQLServiceBroker">
            <summary>
            Encapsulates our service broker in a windows service process.
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.#ctor(Core.CoreContextSettings)">
            <summary>
            Creates a service broker
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.StartAsyncProcessing">
            <summary>
            Starts service processing in async mode
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.StartProcessing">
            <summary>
            Starts service processing
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.StopProcessing">
            <summary>
            Stops the service processing
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.StopAsyncProcessing">
            <summary>
            Stops service processing in async mode.
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.CreateProcess(Core.CoreContext,System.String,System.String,System.String)">
            <summary>
            Creates and load a new process to service a message queue
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.DoAsyncProcessing(System.Object,System.Boolean)">
            <summary>
            Service processing in async mode
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.DoQueueRetentionCheckup(Core.CoreContext)">
            <summary>
            Do queue retention checkup.
            </summary>
            <param name="session">The messaging session</param>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.Process">
            <summary>
            Actual service processing
            </summary>
        </member>
        <member name="M:Core.Services.SQLServiceBroker.WaitForKilledProcesses">
            <summary>
            Wait for killed processes.
            </summary>
        </member>
        <member name="P:Core.Services.SQLServiceBroker.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="P:Core.Services.SQLServiceBroker.DefaultQueueRetention">
            <summary>
            Gets or sets the default queue retention.
            </summary>
        </member>
        <member name="P:Core.Services.SQLServiceBroker.IsAsync">
            <summary>
            Gets a value indicating if the broker's execution is asynchroneous
            </summary>
        </member>
        <member name="P:Core.Services.SQLServiceBroker.IsRunning">
            <summary>
            Gets a value indicating if the broker is running
            </summary>
        </member>
        <member name="P:Core.Services.SQLServiceBroker.ServiceName">
            <summary>
            Gets the service name
            </summary>
        </member>
        <member name="T:Core.Tools.ProcessUtil">
            <summary>
            Represents a process util.
            </summary>
        </member>
        <member name="M:Core.Tools.ProcessUtil.GetProcessType">
            <summary>
            Gets process type.
            </summary>
            <returns>A Core.Tools.ProcessUtil.ProcessType.</returns>
        </member>
        <member name="T:Core.Tools.ProcessUtil.ProcessType">
            <summary>
            Specifies the process type.
            </summary>
        </member>
        <member name="F:Core.Tools.ProcessUtil.ProcessType.Unknown">
            <summary>Indicates unknown.</summary>
        </member>
        <member name="F:Core.Tools.ProcessUtil.ProcessType.IIS">
            <summary>Indicates that the current process is IIS or dev webserver.</summary>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            Provide extension method to DateTime class.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.FirstDayOfWeekInMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns the first day of week with in the month.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="dow">What day of week to find the first one of in the month.</param>
            <returns>Returns DateTime object that represents the first day of week with in the month.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.FirstWeekDayOfMonth(System.DateTime)">
            <summary>
            Returns the first weekday (Business day) of the month
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns DateTime object that represents the first weekday (Business day) of the month</returns>
        </member>
        <member name="M:System.DateTimeExtensions.LastDayOfWeekInMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns the last day of week with in the month.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="dow">What day of week to find the last one of in the month.</param>
            <returns>Returns DateTime object that represents the last day of week with in the month.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.LastWeekDayOfMonth(System.DateTime)">
            <summary>
            Returns the last weekday (Business day) of the month
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns DateTime object that represents the last weekday (Business day) of the month</returns>
        </member>
        <member name="M:System.DateTimeExtensions.FindClosestWeekDay(System.DateTime)">
            <summary>
            Returns the closest Weekday (Business day) Date
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns the closest Weekday (Business day) Date</returns>
        </member>
        <member name="M:System.DateTimeExtensions.EndOfMonth(System.DateTime)">
            <summary>
            Returns the very end of the given month (the last millisecond of the last hour for the given date)
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns the very end of the given month (the last millisecond of the last hour for the given date)</returns>
        </member>
        <member name="M:System.DateTimeExtensions.BeginningOfMonth(System.DateTime)">
            <summary>
            Returns the Start of the given month (the fist millisecond of the given date)
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns the Start of the given month (the fist millisecond of the given date)</returns>
        </member>
        <member name="M:System.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            Returns the very end of the given day (the last millisecond of the last hour for the given date)
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns the very end of the given day (the last millisecond of the last hour for the given date)</returns>
        </member>
        <member name="M:System.DateTimeExtensions.BeginningOfDay(System.DateTime)">
            <summary>
            Returns the Start of the given day (the fist millisecond of the given date)
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns the Start of the given day (the fist millisecond of the given date)</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetDateByWeek(System.DateTime,System.Int32,System.DayOfWeek)">
            <summary>
            Returns a given datetime according to the week of year and the specified day within the week.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="week">A number of whole and fractional weeks. The value parameter can only be positive.</param>
            <param name="dayofweek">A DayOfWeek to find in the week</param>
            <returns>A DateTime whose value is the sum according to the week of year and the specified day within the week.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.Next(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns first next occurence of specified DayOfTheWeek
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="day">A DayOfWeek to find the next occurence of</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the enum value represented by the day.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.Previous(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns next "first" occurence of specified DayOfTheWeek
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="day">A DayOfWeek to find the previous occurence of</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the enum value represented by the day.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32)">
            <summary>
            Returns the original DateTime with Hour part changed to supplied hour parameter
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="hour">A number of whole and fractional hours. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the numbers represented by the parameters.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the original DateTime with Hour and Minute parts changed to supplied hour and minute parameters
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="hour">A number of whole and fractional hours. The value parameter can be negative or positive.</param>
            <param name="minute">A number of whole and fractional minutes. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the numbers represented by the parameters.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the original DateTime with Hour, Minute and Second parts changed to supplied hour, minute and second parameters
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="hour">A number of whole and fractional hours. The value parameter can be negative or positive.</param>
            <param name="minute">A number of whole and fractional minutes. The value parameter can be negative or positive.</param>
            <param name="second">A number of whole and fractional seconds. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the numbers represented by the parameters.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the original DateTime with Hour, Minute, Second and Millisecond parts changed to supplied hour, minute, second and millisecond parameters
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="hour">A number of whole and fractional hours. The value parameter can be negative or positive.</param>
            <param name="minute">A number of whole and fractional minutes. The value parameter can be negative or positive.</param>
            <param name="second">A number of whole and fractional seconds. The value parameter can be negative or positive.</param>
            <param name="millisecond">A number of whole and fractional milliseconds. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the numbers represented by the parameters.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetDate(System.DateTime,System.Int32)">
            <summary>
            Returns DateTime with changed Year part
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="year">A number of whole and fractional years. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the numbers represented by the parameters.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns DateTime with changed Year and Month part
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="year">A number of whole and fractional years. The value parameter can be negative or positive.</param>
            <param name="month">A number of whole and fractional month. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the numbers represented by the parameters.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.SetDate(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns DateTime with changed Year, Month and Day part
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="year">A number of whole and fractional years. The value parameter can be negative or positive.</param>
            <param name="month">A number of whole and fractional month. The value parameter can be negative or positive.</param>
            <param name="day">A number of whole and fractional day. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the numbers represented by the parameters.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.AddBusinessDays(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of Business days to the value of this instance.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="days">A number of whole and fractional Business days. The value parameter can be negative or positive.</param>
            <returns>A DateTime whose value is the sum of the date and time represented by this instance and the number of Business days represented by days.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.CountBusinessDays(System.DateTime,System.DateTime)">
            <summary>
            Calculate Business days between two dates.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="otherdate">End or start date to calculate to or from.</param>
            <returns>Amount of Business days between the two dates</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToMicrosoftNumber(System.DateTime)">
            <summary>
            Converts any datetime to the amount of seconds from 1972.01.01 00:00:00
            Microsoft sometimes uses the amount of seconds from 1972.01.01 00:00:00 to indicate an datetime.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Total seconds past since 1972.01.01 00:00:00</returns>
        </member>
        <member name="M:System.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Returns true if the day is Saturday or Sunday
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>boolean value indicating if the date is a weekend</returns>
        </member>
        <member name="M:System.DateTimeExtensions.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Returns true if the date is between or equal to one of the two values.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <param name="startDate">Start date to check for</param>
            <param name="endDate">End date to check for</param>
            <returns>boolean value indicating if the date is between or equal to one of the two values</returns>
        </member>
        <member name="M:System.DateTimeExtensions.Quarter(System.DateTime)">
            <summary>
            Get the quarter that the datetime is in.
            </summary>
            <param name="obj">DateTime Base, from where the calculation will be preformed.</param>
            <returns>Returns 1 to 4 that represenst the quarter that the datetime is in.</returns>
        </member>
        <member name="T:Core.Collections.CastDictionary`2">
            <summary>
            Represents a cast dictionary.
            </summary>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
            
        </member>
        <member name="M:Core.Collections.CastDictionary`2.Get``1">
            <summary>
            Gets the first value of type T.
            </summary>
            <returns>The value that matches type T</returns>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.TryGet``1">
            <summary>
            Trys to Get the first value of type T or <c>null</c>.
            </summary>
            <returns>The value that matches type T</returns>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.Get``1(`0)">
            <summary>
            Gets a value of type T for a given key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value that matches the given key</returns>
            <remarks>The object will be converted to the resquested if required</remarks>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.TryGet(`0)">
            <summary>
            Trys to get a value for a given key or <c>null</c>.
            </summary>
            <param name="key">The key.</param>
            <returns>The value that matches the given key or <c>null</c></returns>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.TryGet``1(`0)">
            <summary>
            Trys to get a value of type T for a given key or <c>null</c> if not found.
            </summary>
            <param name="key">The key.</param>
            <returns>The value that matches the given key or <c>null</c></returns>
            <remarks>The object will be converted to the resquested if required</remarks>
        </member>
        <member name="M:Core.Collections.CastDictionary`2.EnsureType``1(System.Object)">
            <summary>
            Ensures that item is of the right type.
            </summary>
            <param name="item">The item.</param>
            <returns>A T.</returns>
        </member>
        <member name="T:Core.Tools.NotEquitable">
            <summary>
            Marks a field to indicate that the value shouldn't
            be test in the Equals method of ReflectionUtil. 
            </summary>
        </member>
        <member name="T:Core.Services.ExpressionSerialization.SerializableExpression">
            <summary>
            Represents a serializable expression.
            </summary>
        </member>
        <member name="F:Core.Services.ExpressionSerialization.SerializableExpression.__ExpressionSerializer">
            <summary>Field for _ExpressionSerializer.</summary>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.SerializableExpression.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.SerializableExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Constructor.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.SerializableExpression.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Core.Services.ExpressionSerialization.SerializableExpression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. 
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. 
            </param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
        </member>
        <member name="P:Core.Services.ExpressionSerialization.SerializableExpression._ExpressionSerializer">
            <summary>
            Gets the expression serializer.
            </summary>
        </member>
        <member name="P:Core.Services.ExpressionSerialization.SerializableExpression.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
        </member>
        <member name="T:Core.Features.ServiceFeature">
            <summary>
            Represents a business logic manager.
            </summary>
        </member>
        <member name="M:Core.Features.ServiceFeature.#ctor(Core.CoreContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Core.Features.ServiceFeature.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Core.Features.ServiceFeature.GetServices">
            <summary>
            Gets known services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Features.ServiceFeature.GetServiceQueues">
            <summary>
            Gets known service queues.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Features.ServiceFeature.GetServiceProcesses">
            <summary>
            Gets all currently running service processes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Features.ServiceFeature.GetServiceStatus(System.String,System.String)">
            <summary>
            Gets the current status of a service.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="queueName">Name of the queue.</param>
        </member>
        <member name="M:Core.Features.ServiceFeature.EnsureServiceQueueExistence(System.String,System.String)">
            <summary>
            Ensures that a queue and service are properly setup in the database.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="queueName">Name of the queue.</param>
            <returns>Returns the service id.</returns>
        </member>
        <member name="M:Core.Features.ServiceFeature.UpdateStatus(System.String,System.String)">
            <summary>
            Updates our status with the broker.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="queueName">Name of the queue.</param>
        </member>
        <member name="M:Core.Features.ServiceFeature.UpdateStatusServiceHasStopped(System.String,System.String)">
            <summary>
            Updates the status to indicate that the service has stopped.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="queueName">Name of the queue.</param>
        </member>
        <member name="T:Core.Features.MessagingFeature">
            <summary>
            Represents a business logic manager.
            </summary>
        </member>
        <member name="M:Core.Features.MessagingFeature.#ctor(Core.CoreContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Core.Features.MessagingFeature.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetMessageCount(System.String)">
            <summary>
            Gets the count of available messages in a queue
            </summary>
            <param name="queueName">The queue name.</param>
            <returns>Returns the count of available messages in the queue</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetMessageCount(System.String,System.String)">
            <summary>
            Gets the count of available messages in a queue
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">A destination to filter with.</param>
            <returns>Returns the count of available messages in the queue</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessage(System.String,System.String,System.Object)">
            <summary>
            Posts a new message
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="content">The message content.</param>
            <returns>The message that was posted</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessage(System.String,System.String,System.Object,System.DateTime)">
            <summary>
            Posts a new message
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="content">The message content.</param>
            <param name="activation">A date and time before which the message will not be available</param>
            <returns>The message that was posted</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessage(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Posts a new message
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="priority">The message priority (lowest has highest priority)</param>
            <param name="content">The message content.</param>
            <returns>The message that was posted</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessage(System.String,System.String,System.Int32,System.Object,System.DateTime)">
            <summary>
            Posts a new message
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="priority">The message priority (lowest has highest priority)</param>
            <param name="content">The message content.</param>
            <param name="activation">A date and time before which the message will not be available</param>
            <returns>The message that was posted</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessageOnce(System.String,System.String,System.Object)">
            <summary>
            Posts the message only if there are no messages with the same content in the queue.
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="content">The message content.</param>
            <returns>The message that was posted or the one that was already there</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessageOnce(System.String,System.String,System.Object,System.DateTime)">
            <summary>
            Posts the message only if there are no messages with the same content in the queue.
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="content">The message content.</param>
            <param name="activation">A date and time before which the message will not be available</param>
            <returns>The message that was posted or the one that was already there</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessageOnce(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Posts a new message
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="priority">The message priority (lowest has highest priority)</param>
            <param name="content">The message content.</param>
            <returns>The message that was posted or the one that was already there</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessageOnce(System.String,System.String,System.Int32,System.Object,System.DateTime)">
            <summary>
            Posts the message only if there are no messages with the same content in the queue.
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="priority">The message priority (lowest has highest priority)</param>
            <param name="content">The message content.</param>
            <param name="activation">A date and time before which the message will not be available</param>
            <returns>The message that was posted or the one that was already there</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.SetMessageContent(Core.Schema.Message)">
            <summary>
            Gets message content.
            </summary>
            <param name="message">The message.</param>
            <returns>A System.Object.</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetMessageCount(System.String,System.String,System.String)">
            <summary>
            Gets the count of non treated messages that matches <c>content</c> in a queue
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">A destination to filter with.</param>
            <param name="content">The content to search for</param>
            <returns>Returns the count of available messages that matches <c>content</c> in the queue</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.MarkMessageAsTreated(System.Int64)">
            <summary>
            Marks a message as treated.
            </summary>
            <param name="messageId">The message id.</param>
        </member>
        <member name="M:Core.Features.MessagingFeature.CreateMessage(System.String,System.String,System.String,System.Int32,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Creates a new message
            </summary>
            <param name="sender">The sender.</param>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="priority">The message priority (lowest has highest priority)</param>
            <param name="content">The message content.</param>
            <param name="activation">A date and time before which the message will not be available</param>
            <returns>The message that was created</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessage(System.String,System.String,System.String,System.Int32,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Posts a new message
            </summary>
            <param name="sender">The sender.</param>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="priority">The message priority (lowest has highest priority)</param>
            <param name="content">The message content.</param>
            <param name="activation">A date and time before which the message will not be available</param>
            <returns>The message that was posted</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.PostMessageOnce(System.String,System.String,System.String,System.Int32,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Posts the message only if there are no messages with the same content in the queue.
            </summary>
            <param name="sender">The sender.</param>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <param name="priority">The message priority (lowest has highest priority)</param>
            <param name="content">The message content.</param>
            <param name="activation">A date and time before which the message will not be available</param>
            <returns>The message that was posted or the one that was already there</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.SaveMessage(Core.Schema.Message)">
            <summary>
            Saves changes to a message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetMessage(System.String)">
            <summary>
            Gets the next available message in a queue
            </summary>
            <param name="queueName">The queue name.</param>
            <returns>Returns the next available message in the queue or <c>null</c></returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetMessage(System.String,System.String)">
            <summary>
            Gets the next available message in a queue
            </summary>
            <param name="queueName">The queue name.</param>
            <param name="destination">The destination or <c>null</c>.</param>
            <returns>Returns the next available message in the queue or <c>null</c></returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetMessage(System.Int64)">
            <summary>
            Gets a message by its id.
            </summary>
            <param name="messageId">The message id.</param>
            <returns>The message or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.ClearTreatedMessages(System.String,System.TimeSpan)">
            <summary>
            Clears treated messages from its queue
            </summary>
            <param name="queueName">The name of the queue</param>
            <param name="retention">How long to retain treated messages</param>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetQueues">
            <summary>
            Gets all currently known queues.
            </summary>
            <returns>Returns all currently known queues.</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetDestinations(System.String)">
            <summary>
            Gets all currently known destinations for a queue.
            </summary>
            <param name="queueName">The queue name.</param>
            <returns>Returns all currently known destinations for a queue.</returns>
        </member>
        <member name="M:Core.Features.MessagingFeature.GetMessagesWithErrorInfo">
            <summary>
            Gets all the messages that are currently in error or was at one time in error.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.ConnectionExtensions">
            <summary>
            ADO database connection extensions
            </summary>
        </member>
        <member name="M:System.ConnectionExtensions.Opened(System.Data.Common.DbConnection)">
            <summary>
            Opens a connection if not already opened and returns it.
            </summary>
            <param name="connection">The connection.</param>
            <returns>An opened connection.</returns>
        </member>
        <member name="M:System.ConnectionExtensions.CreateCommand(System.Data.Common.DbConnection)">
            <summary>
            Creates a native DbCommand object and enlist it within this transaction.
            </summary>
            <param name="connection">The connection</param>
            <returns>Returns a new DbCommand ready to use</returns>
        </member>
        <member name="M:System.ConnectionExtensions.CreateCommand(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Object[])">
            <summary>
            Creates a native DbCommand object and enlist it within this transaction.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="commandType">The type of DbCommand to create</param>
            <param name="sqlText">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns a new DbCommand ready to use</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            Executes a query and returns a data reader.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the data reader</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteReader(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Object[])">
            <summary>
            Executes a query and returns a data reader.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="commandType">The type of DbCommand to use</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the data reader</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteDataSet(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            Executes a query and returns a dataset.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the dataset</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Object[])">
            <summary>
            Executes a query and returns a dataset.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="commandType">The type of DbCommand to use</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the dataset</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            Executes an insert or update query.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the number of affected records</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Object[])">
            <summary>
            Executes a stored procedure, an insert or an update query.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="commandType">The type of DbCommand to use</param>
            <param name="sqlText">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the number of affected records</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteQuery``1(System.Data.Common.DbConnection,``0,System.String,System.Object[])">
            <summary>
            Executes a query and returns the data.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="connection">The connection</param>
            <param name="defaultValue">Default return type value</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the query results</returns>
            <example>
            <code>
            var list = Connection.ExecuteQuery(new {
                    StringField = default(string),
                    IntegerField = default(int),
                    NumberField = default(double)}, 
            @"select t1.StringField, t1.IntegerField, t1.NumberField
            from table1 t1 left join table2 t2 on t1.key = t2.key
            where t1.name = ?", "foo");
            foreach(var item in list) {
                Console.WriteLine(item.StringField + item.IntegerField.ToString() + item.NumberField.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteQuery``1(System.Data.Common.DbConnection,System.Func{System.Object[],``0},System.String,System.Object[])">
            <summary>
            Executes a query and returns the data.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="connection">The connection</param>
            <param name="constructor">A constructor delegate for your objects</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the query results</returns>
            <example>
            <code>
            var list = Connection.ExecuteQuery(new {
                    StringField = default(string),
                    IntegerField = default(int),
                    NumberField = default(double)}, 
            @"select t1.StringField, t1.IntegerField, t1.NumberField
            from table1 t1 left join table2 t2 on t1.key = t2.key
            where t1.name = ?", "foo");
            foreach(var item in list) {
                Console.WriteLine(item.StringField + item.IntegerField.ToString() + item.NumberField.ToString());
            }
            </code>
            </example>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteScalarQuery``1(System.Data.Common.DbConnection,``0,System.String,System.Object[])">
            <summary>
            Executes a query and returns the scalar result.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>defaultValue</c></typeparam>
            <param name="connection">The connection</param>
            <param name="defaultValue">Default return type value</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the scalar result</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteScalarQuery(System.Data.Common.DbConnection,System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Executes a query and returns the scalar result.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="type">the value type</param>
            <param name="defaultValue">Default return value</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the scalar result</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteSingleRowQuery``1(System.Data.Common.DbConnection,``0,System.String,System.Object[])">
            <summary>
            Executes a query and returns the first row.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="connection">The connection</param>
            <param name="defaultValue">Default return type value</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the first query result</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteSingleRowQuery``1(System.Data.Common.DbConnection,System.Func{System.Object[],``0},System.String,System.Object[])">
            <summary>
            Executes a query and returns the first row.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <typeparam name="T">Type infered from argument <c>type</c></typeparam>
            <param name="connection">The connection</param>
            <param name="constructor">A constructor delegate for your objects</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the first query result</returns>
        </member>
        <member name="M:System.ConnectionExtensions.ExecuteRawQuery(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            Executes a query and returns the data.
            </summary>
            <remarks>
            You can use ? characters as a place holder for parameters within your query.
            This will work on all database engines and drivers.
            </remarks>
            <param name="connection">The connection</param>
            <param name="query">The SQL query command text</param>
            <param name="dbParams">(optional) parameters if you used ? within your sqlText</param>
            <returns>Returns the query results</returns>
        </member>
        <member name="M:System.ConnectionExtensions.AssertConnected(System.Data.Common.DbConnection)">
            <summary>
            Asserts connection is connected.
            </summary>
            <param name="connection">The connection</param>
        </member>
        <member name="T:Core.Features.CacheFeature">
            <summary>
            Represents a core cache manager.
            </summary>
        </member>
        <member name="M:Core.Features.CacheFeature.#ctor(Core.CoreContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Core.Features.CacheFeature.GetApplicationParameter(System.String)">
            <summary>
            Gets the named parameter values.
            </summary>
            <value>The parameter values (in time).</value>
        </member>
        <member name="M:Core.Features.CacheFeature.SetApplicationParameter(Core.Schema.ApplicationParameter)">
            <summary>
            Gets the named parameter values.
            </summary>
            <value>The parameter values (in time).</value>
        </member>
    </members>
</doc>
